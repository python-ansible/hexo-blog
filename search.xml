<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[ajax]]></title>
    <url>%2Fhexo-blog%2F2019%2F04%2F14%2Fajax%2F</url>
    <content type="text"><![CDATA[问题 用 form 可以发请求，但是会刷新页面或者新开页面 用 a 可以发 get 请求，但是会刷新页面或新开页面 用 img 可以发 get 请求，只能以图片形式展示 用 link 可以发 get 请求，只能以 CSS、favicon 形式展示 用 script 可以发 get 请求，只能以脚本形式运行 AJAXAsynchronous JavaScript and XML 什么是AJAX： XMLHttpRequest 解决了发请求的难题 服务器返回 XML 格式字符串 (现在一般都使用 json 格式) JS 解析 XML，并更新局部页面 12345678910111213141516171819202122232425面试题：请使用原生 JS 来发送 AJAX 请求myButton.addEventListener(&apos;click&apos;, (e)=&gt;&#123; let request = new XMLHttpRequest() request.open(&apos;GET&apos;, &apos;/xxx&apos;) reqeust.send() request.onreadystatechange = ()=&gt;&#123; if(request.readyState === 4)&#123; console.log(&apos;请求响应完毕&apos;) if(request.status &gt;= 200 &amp;&amp; request.status &lt; 300)&#123; console.log(&apos;请求成功&apos;) console.log(request.responseText) \\ xml let parser = new DOMParser(); let xmlDoc = parser.parseFromString(request.responseText,&quot;text/xml&quot;); let title = xmlDoc.getElementsByTagName(&apos;heading&apos;)[0].textContent \\ json let string = request.responseText let object = window.JSON.parse(string) console.log(title) &#125;else if(request.status &gt;= 400)&#123; console.log(&apos;请求失败&apos;) &#125; &#125; &#125;&#125;) request.readyState === 4 代表请求结束 JS VS JSON JSON 没有 function、undefined、变量 JSON 字符串首尾必须是双引号 ” JSON 支持 number string null object array boolean ajax 只有协议+端口+域名 一模一样才允许发请求 (同源策略)readystate === 0No Access-Control-Allow-Origin 错误 CORS Cross-Origin-Resource-Sharing 跨域资源共享后台增加响应头response.setHeader(&#39;Access-Control-Allow-Origin&#39;, &#39;http://允许的网站&#39;)]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jsonp]]></title>
    <url>%2Fhexo-blog%2F2019%2F04%2F13%2Fjsonp%2F</url>
    <content type="text"></content>
      <categories>
        <category>jsonp</category>
      </categories>
      <tags>
        <tag>jsonp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[interview001]]></title>
    <url>%2Fhexo-blog%2F2019%2F04%2F08%2Finterview001%2F</url>
    <content type="text"><![CDATA[请写出一个符合 W3C 规范的 HTML 文件，要求 1.页面标题为「我的页面」2.页面中引入了一个外部 CSS 文件，文件路径为 /style.css3.页面中引入了另一个外部 CSS 文件，路径为 /print.css，该文件仅在打印时生效4.页面中引入了另一个外部 CSS 文件，路径为 /mobile.css，该文件仅在设备宽度小于 500 像素时生效5.页面中引入了一个外部 JS 文件，路径为 /main.js6.页面中引入了一个外部 JS 文件，路径为 /gbk.js，文件编码为 GBK7.页面中有一个 SVG 标签，SVG 里面有一个直径为 100 像素的圆圈，颜色随意8.注意题目中的路径 12 移动端怎么做适配的meta viewport媒体查询（CSS深入浅出第五课）动态 rem 方案（CSS深入浅出第九课） 使用 css3 实现圆角矩形和阴影 什么是闭包，闭包的用途 call、apply、bind 的用法12 说出常见的 HTTP 状态码和含义 请写出一个 HTTP post 请求的内容，包括四部分。第四部分的内容是 username=ff&amp;password=123第二部分必须含有 Content-Type 字段请求的路径为 /path 请说出至少三种排序的思路，这三种排序的时间复杂度分别为O(n*n)O(n log2 n)O(n + max 一个页面从输入 URL 到页面加载显示完成，这个过程中都发生了什么？ 如何实现数组去重？不要做多重循环，只能遍历一次请给出两种方案，一种能在 ES 5 环境中运行，一种能在 ES 6 环境中运行（提示 ES 6 环境多了一个 Set 对象）1array = [1,5,2,3,4,2,3,1,3,4]]]></content>
      <categories>
        <category>interview</category>
      </categories>
      <tags>
        <tag>interview</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript09]]></title>
    <url>%2Fhexo-blog%2F2019%2F04%2F05%2Fjavascript09%2F</url>
    <content type="text"><![CDATA[jQUERYjQuery 的本质，选取元素，对其操作。1234567891011121314151617181920212223// 修改公共prototypeNode.prototype.getSiblings = function ()&#123; var allChildren = this.parentNode.children var array = &#123;length:0&#125; for (let i=0; i&lt;allChildren.length; i++)&#123; if (allChildren[i] !== this)&#123; array[i] = allChildren[i] array.length += 1 &#125; &#125; return array&#125;Node.prototype.addClass = function (classes)&#123; for (let key in classes)&#123; var value = classes[key] method = value ? &apos;add&apos; : &apos;remove&apos; this.classList[method](key) &#125;&#125;item.getSiblings()item.addClass(&#123;&apos;a&apos;:true, &apos;b&apos;:false&#125;) 123456789101112131415161718192021222324252627282930313233// 无侵入nodewindow.jQuery = function(nodeOrString)&#123; let node if(typeof nodeOrString === &apos;string&apos;)&#123; node = document.querySelector(nodeOrString) &#125; else &#123; node = nodeOrString &#125; return&#123; getSiblings: function ()&#123; var allChildren = node.parentNode.children var array = &#123;length:0&#125; for (let i=0; i&lt;allChildren.length; i++)&#123; if (allChildren[i] !== node)&#123; array[i] = allChildren[i] array.length += 1 &#125; &#125; return array&#125;, addClass: function (classes)&#123; for (let key in classes)&#123; var value = classes[key] method = value ? &apos;add&apos; : &apos;remove&apos; node.classList[method](key) &#125;&#125; &#125;&#125;var node2 = jQuery (item)node2.getSiblings()node2.addClass(&#123;&apos;a&apos;:true, &apos;b&apos;:false&#125;) 1234567891011121314151617181920212223242526272829303132333435363738394041window.jQuery = function(nodeOrString)&#123; let nodes = &#123;&#125; if(typeof nodeOrString === &apos;string&apos;)&#123; let temp = document.querySelectorAll(nodeOrString) for (let i=0; i&lt;temp.length; i++)&#123; nodes[i] = temp[i] &#125; nodes.length = temp.length &#125; else if (nodeOrString instanceof Node)&#123; nodes = &#123; 0: nodeOrString, length: 1 &#125; &#125; nodes.addClass = function(classes)&#123; classes.forEach((value) =&gt; &#123; for (let i=0; i&lt;nodes.length; i++)&#123; nodes[i].classList.add(value) &#125; &#125;) &#125; nodes.text = function(text)&#123; if (text === undefined)&#123; var texts = [] for (let i=0; i&lt;nodes.length; i++)&#123; texts.push(nodes[i].textContent) &#125; return texts &#125; else &#123; for (let i=0; i&lt;nodes.length; i++)&#123; nodes[i].textContent = text &#125; &#125; &#125; return nodes&#125;window.$ = jQuery;var $node2 = $(&apos;ul &gt; li&apos;)$node2.addClass([&apos;blue&apos;]) jQuery中文文档 window.$ = jQuery (alias) jQuery 构造出来的对象也最好以 $ 开头 jQuery 下载包的区别： production：压缩、转换后的的源码 development： 源码 map： 信息文件，记录了转换后的代码所对应的转换前的位置信息。 jQuery 获取元素 by id：$(&quot;#id&quot;) by class: $(&quot;.classs&quot;) 1234567891011面试题 请说出 div 和 $div 的区别和联系：&lt;div id=x&gt;&lt;/div&gt;var div = document.getElementById(&apos;x&apos;)var $div = $(&apos;#x&apos;)$div 是 jQuery 对象，div 是 DOM 对象，不能混用对方的方法。$div 得到的是[object Object] div 得到的是[object HTMLDivElement]$div 转 div: $div[0] 或者 $div.get(0)div 转 $div: $(div)div 的属性和方法有 childNodes firstChid nodeType 等 $div 的 属性和方法有 addClass removeClass toggleClass 等 不要覆盖全局变量。 使用局部变量，申明一个匿名函数，立刻调用 。 解决立即执行报错 () - + ! ~ ES6 let 可以表示局部变量，{} 是包不住 var 的。 不要使用 $.show() $.hide() js 只控制行为，不控制样式，即只 add remove class]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript08]]></title>
    <url>%2Fhexo-blog%2F2019%2F04%2F04%2Fjavascript08%2F</url>
    <content type="text"><![CDATA[DOM Level0 onclick onerror onload onmousexxx 唯一，互相覆盖 DOM Level2 队列，先进先出12x. addEventListener(&apos;click&apos;, function()&#123;&#125;)x. removeEventListener(&apos;click&apos;, function()&#123;&#125;) one 捕获冒泡阶段 =&gt; 从上到下，从下到上 自身同时存在捕获冒泡，使用队列模式 非自身，按照捕获冒泡的顺序 DOM APIDocument Object Model有点类似 ORM 一个是将数据库映射为对象，一个是将 documnet 映射为对象 , 主要功能是将页面中的节点通过对应的构造函数转换成对象 Node 包含： Documnet Element Text 其他(比如comment)Node API 关键字： child/children/parent node/nodes first/last next/previous sibling/siblings 兄弟 type value/text/content inner/outer elementNode 属性: childNodes \ 子节点 children \ 子标签，不包含 text firstChild lastChild \ 包含text firstElementChild lastElementChild \ 不包含text previousSibling nextSibling previousElementSibling nextElementSibling outerText innerText // 触发重排，性能低；清除其他子元素 textContent // 包括 script 和 style；会返回隐藏元素文本 nodeName nodeValue nodeType // 1 element 3 text ownerDocument parentElement parentNode DocumentFragment 优化 Node 方法： appendChild() cloneNode(false) // 默认浅拷贝，true 深拷贝 contains() hasChildNodes() insertBefore() isEqualNode() // 相等 isSameNode() // 相同 === removeChild() replaceChild() normalize() // 常规化 Document 属性 anchors // 弃用，获取所有a标签，必须要有name body characterSet // 字符编码 childElementCount children doctype documentElement // html 元素 domain // 域名 head images links // 获取所有a标签 location onXxx plugins // 插件 readyState referrer // 引荐人，从哪一个页面跳转来的，安全性 scripts scrollingElement styleSheets title visibilityState // 页面激活状态Document 方法 open() close() write() wirteln() // writeline createDocumentFragment() createElement() createNextNode() execCommand() exitFullscreen() // 退出全屏 getElementById() getElementByClassName() getElementByName() getElementByTagName() getSelection() // 获取选中文本 hasFocus() querySelector() // 支持路径法 div &gt; div; 伪数组 querySelectorAll() registerElement()document 类似 file，都有open -&gt; wirte -&gt; close12345document.write(1)document.write(2)setTimeout(()=&gt;&#123; document.write(3)&#125;,3000) // 3 write 的危险性 childNodes 是动态集合。DOM树删除或新增一个相关节点，都会立刻反映在NodeList接口中。document.querySelectorAll返回的是一个静态集合。DOM内部的变化，并不会实时反映在返回结果之中。123456789var parent = document.getElementById(&apos;parent&apos;);parent.childNodes.length // 假设是2parent.appendChild(document.createElement(&apos;div&apos;));parent.childNodes.length // 3var allDiv = document.querySelectorAll(&apos;div&apos;)allDiv.length // 假设是 2document.body.appendChild( document.createElement(&apos;div&apos;) )allDiv.length // 2 element 属性 attributes childElementCount children classList className clientHeight clientWidth clientLeft clientTop id firstElementChild lastElementChild innerHTML // 不要用，安全问题element 方法 querySelector() querySelectorAll() HTMLCollection &amp; NodeList HTMLCollection实例对象的成员只能是Element节点，NodeList实例对象的成员可以包含其他节点。 HTMLCollection实例对象可以用id属性或name属性引用节点元素，NodeList只能使用数字索引引用。 ChildNodeChildNode是一个原始接口，它通过Element、DocumentType 和 CharacterData 对象实现。 ChildNode.remove() ChildNode.before() ChildNode.after() ChildNode.replaceWith()]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sftp001]]></title>
    <url>%2Fhexo-blog%2F2019%2F04%2F03%2Fsftp001%2F</url>
    <content type="text"><![CDATA[连接sftp 1sftp root@27.48.137.6 sftp 帮助 1help pwd 12pwdlpwd ls 12lslls 浏览本地目录 1explore 上传文件 12put filemput *.xls 下载文件 12get filemget *.xls cd 12cd lcd mkdir 12mkdir dirlmkdir dir rm 12rm filermdir dir exit sftp 123byeexitquit]]></content>
      <categories>
        <category>sftp</category>
      </categories>
      <tags>
        <tag>sftp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[neutron001]]></title>
    <url>%2Fhexo-blog%2F2019%2F04%2F03%2Fneutron001%2F</url>
    <content type="text"><![CDATA[1select * from ipallocations where ip_address=&apos;30.30.3.66&apos;; port123neutron port-create net_id指定ipneutron port-create net_name --fixed-ip ip_address=192.168.2.40]]></content>
      <categories>
        <category>neutron</category>
      </categories>
      <tags>
        <tag>neutron</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript 函数]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F27%2Fjavascript07%2F</url>
    <content type="text"><![CDATA[函数五种申明方法 函数就是可以反复调用的代码块123456789function f(arg1, arg2)&#123;return undefined&#125; // f 全局var f = function(arg1, arg2)&#123;return&#125; // 匿名函数必须要赋值var x = function f()&#123;&#125; // f 函数内[√] console.log(x)[x] console.log(f)f = new Function(&apos;x&apos;, &apos;y&apos;, &apos;return x + y&apos;)f = (x, y) =&gt; &#123;return x + y&#125; //箭头函数f = (x, y) =&gt; x + yf = x =&gt; x * x callthis 是函数和对象间的羁绊123456f()f.call(undefined, arg1, arg2)call 的第一个参数可以用 this 得到call 后面的参数可以用 arguments 得到undefined =&gt; this[arg1, arg2] =&gt; arguments // 伪数组 调用堆栈 call stack，每进入一个函数，会记录位置，先进后出递归有上限 – stack overflow如果一个函数，使用了范围外的变量，就是闭包面试题12345678910111213141516171819var f1 = function f2()&#123;&#125; // f1.name === &apos;f2&apos; f2.naem 未定义function f()&#123; ‘use strict&apos; console.log(this) &#125;f.call(1) // if(use strict)&#123;1&#125; else &#123;Number 对象1&#125;var a = console.log(1) // a undefinedvar a = (1,2) // a === 2var liTags = document.querySelectorAll(&apos;li&apos;)for (var i=0; i&lt;liTags.length; i++)&#123; liTags[i].onclick = function()&#123; console.log(i) &#125;&#125;// 点击li2 打印6 apply不确定参数个数时，使用applyfn.apply(asThis, params)bindbind 返回一个新的函数（没有调用），这个新函数会call原来的函数。123456789var view = &#123; element: $(&apos;#div1&apos;), bindEvents: function()&#123; this.element.onclick = this.onClick.bind(this) &#125;, onClick: function()&#123; this.element.addClass(&apos;active&apos;) &#125;&#125; 柯里化/高阶函数 柯里化返回函数的函数用于模板引擎和惰性求值1234567function Handlerbar(template)&#123; return function(data)&#123; return template.replace(&apos;&#123;&#123;name&#125;&#125;&apos;, data.name) &#125;&#125;var t = Handlerbar(&apos;&lt;h1&gt;Hi, I am &#123;&#123;name&#125;&#125;&lt;/h1&gt;&apos;)t(&#123;name:&apos;frank&apos;&#125;) 高阶函数 接受一个或多个函数作为输入 输出一个函数 同时满足两个条件12345678910array.sort(function(a,b)&#123;a-b&#125;)array.forEach(function(a)&#123;&#125;)array.map(function()&#123;&#125;)array.filter(function()&#123;&#125;)array.reduce(function()&#123;&#125;)fn.bind.call(fn,&#123;&#125;,1,2,3)高阶函数的写法array.filter(function(n)&#123;n%2===0&#125;).reduce(function(prev,next)&#123;return prev+next&#125;,0)reduce(filter(array, function(n)&#123;n%2===0&#125;), function(prev,next)&#123;return prev+next&#125;,0)sort(filter(array, function(n)&#123;n%2===1&#125;), function(a,b)&#123;return a-b&#125;) 回调 被当做参数的函数就是回调 一定会调用 和同步异步无关 构造函数 返回对象的函数就是构造函数 一般首字母大写12Number(1)Object() 箭头函数 没有this 理解函数 12345678910111213141516171819202122function curry(func , fixedParams)&#123; if ( !Array.isArray(fixedParams) ) &#123; fixedParams = [ ] &#125; return function()&#123; let newParams = Array.prototype.slice.call(arguments); // 新传的所有参数 if ( (fixedParams.length+newParams.length) &lt; func.length ) &#123; return curry(func , fixedParams.concat(newParams)); &#125;else&#123; return func.apply(undefined, fixedParams.concat(newParams)); &#125; &#125;;&#125;var abc = function(a, b, c) &#123; return [a, b, c];&#125;;var curried = curry(abc);curried(1)(2)(3);// =&gt; [1, 2, 3]curried(1, 2)(3);// =&gt; [1, 2, 3]curried(1, 2, 3);// =&gt; [1, 2, 3]]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript 标准库]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F26%2Fjavascript06%2F</url>
    <content type="text"><![CDATA[加 new 生成对象，不加 new 生成基本类型 Number() 数字 String() 字符串 Boolean() 布尔值 加不加 new 都一样 Object() Array() 用于构造数组的全局对象数组是按顺序排列的一组值 123456不一致性var a = Array(3) // 只申明了数组的长度0 in a // false var a = Array(3,3) // a[0] = 3, a[1] = 3等价var a = [3,3] Array.prototype1234pushpopshiftjoin forEach12345三个参数分别是value,key,a第三个参数不是必须的a.forEach(function(x,y,[z])&#123; console.log(x,y,z)&#125;) forEach 底层实现123456var obj = &#123;0:&apos;a&apos;, 1:&apos;b&apos;, length:2&#125;obj.forEach = function(x)&#123; for(let i=0; i&lt;obj.length; i++)&#123; x(this[i], i) &#125;&#125; sort123a.sort() // sort 会改变本身a.sort(function(x,y)&#123;return x-y&#125;)a.sort(function(x,y)&#123;return y-x&#125;) 其他123456789101112131415161718a.join() //默认逗号a.concat(b)var b = a.concat([]) //产生一个新数组a.map(function(value, key)&#123;return value * 2&#125;)a.map(value =&gt; value * 2)a.filter(function(value, key)&#123;return value &gt; 5&#125;)a.reduce(function(x, y)&#123;return x + y&#125;, 0) // x 指每一次的结果, y 指a的每一项, return 即下一次的x, 0 x的初始值 a.reduce((x, y) =&gt; x + y, 0)a.reduce(function(arr, n)&#123; arr.push(n * 2) return arr &#125;, []) // 使用 reduce 实现 mapa.reduce(function(arr, n)&#123; if(n % 2 === 0)&#123; arr.push(n) &#125; return arr&#125;, []) // 使用 reduce 实现 filter 题目123456789101112131415161718排序var students = [&apos;小明&apos;,&apos;小红&apos;,&apos;小花&apos;]var scores = &#123; 小明: 59, 小红: 99, 小花: 80 &#125;students.sort(function(x, y) &#123; return scores[y] - scores[x] &#125; 偶数的平方var a = [1,2,3,4,5,6,7,8,9]a.filter(x =&gt; x % 2 === 0).map(value =&gt; value*value)基数的和var a = [1,2,3,4,5,6,7,8,9]a.reduce(function(x, y)&#123; if (y%2 === 1) &#123; return x + y &#125; else return x&#125;, 0) arguments 伪数组 Function()1234var f = function(a,b) &#123; return a+b&#125;var f = new Function(&apos;a&apos;, &apos;b&apos;, &apos;return a+b&apos;) Function.prototype123callbindapply]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[qemu001]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F21%2Fqemu001%2F</url>
    <content type="text"><![CDATA[qcow2 镜像释放磁盘空间方法一 用0填满磁盘dd if=/dev/zero of=~/junk 释放空间 rm junk 关机virsh shutdown kvm 转换qemu-img convert -O qcow2 source.qcow2 shrunk.qcow2 方法二 直接压缩转换`qemu-img convert -c -O qcow2 source.qcow2 shrunk.qcow2` qcow2 镜像增加网卡 virsh domiflist snale virsh attach-interface snale –type bridge –source br0 –config virsh dumpxml snale &gt;/etc/libvirt/qemu/snale.xml virsh define /etc/libvirt/qemu/snale.xml virsh detach-interface snale –type bridge –mac 52:54:00:14:86:cf // 删除网卡]]></content>
      <categories>
        <category>qemu</category>
      </categories>
      <tags>
        <tag>qemu</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[httpd]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F18%2Fhttpd%2F</url>
    <content type="text"><![CDATA[使用UTF-8编码，文件名全显示IndexOptions Charset=UTF-8 NameWidth=*]]></content>
      <categories>
        <category>httpd</category>
      </categories>
      <tags>
        <tag>httpd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F18%2Fwindows%2F</url>
    <content type="text"><![CDATA[搜索工具：Everything *markdown:Haroopad Typora **]]></content>
      <categories>
        <category>windows</category>
      </categories>
      <tags>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript05]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F17%2Fjavascript05%2F</url>
    <content type="text"><![CDATA[JS 对象全局对象windowwindow. 可以省略mdn window 详细了解 ECMAScript 规定： parseInt parseFloat Number() 还可以初始化为对象 String() 还可以初始化为对象 Boolean() 还可以初始化为对象 Object() 还可以初始化为对象 setTimeout(function(){}, 3000) 指定时间 ms 后执行函数 私有： alert 弹窗 prompt 输入框 confirm 确认框 console.log console.dir document (文档) DOM document.createElement document.getElementById history (浏览器) BOM DOM 获取元素父节点 parentNode，parentElement 检测元素是标签还是文字 nodeType === 1,nodeType === 3 子标签 children 子节点(包括标签和文字) childNodes 获取下一个标签 循环访问 nextSibling 直到 nodeType === 1 获取所有兄弟标签 声明空数组 siblings，遍历 div.parentNode.children，将 div 以外的元素 push 到数组里 DOM博客 http://luopq.com/2015/11/30/javascript-dom/ 12345678910111213141516var n = 1n.xxx = 2n.xxx // undefinedvar n = new Number(1)n.xxx = 2n.xxx // 2var f1 = falsevar f2 = new Boolean(false)if(f1)&#123;console.log(1)&#125; // if(f2)&#123;console.log(2)&#125; // 2s.charAt(0) 等同于 s[0]s.charCodeAt(0) 获取ascii编码s.charCodeAt(0).toString(16) 获取16进制ascii编码s.trim() 去除字符串 python strip 原型链共用属性 底层实现thisproto 原型proto: Object 保存所有Object共用方法proto: Number proto: Object (Number 有两层)Boolean String 同 Numbervar 对象 = new 函数对象123456789101112131415161718192021var o1 = new Object()var o2 = new Object()var n1 = new Number()o1 === o2 // falseo1.toString() === o2.toString() // trueo1.toString() === n1.toString() // false对象.__proto__ === 函数.prototypeo1.__proto__ === Object.prototype // truen1.__proto__ === Number.prototype // truen1.__proto__.__proto__ === Object.prototype // true声明一个变量，会把 __proto__ 绑定到 prototypeObject.__proto__ === Function.prototypeObject.prototype.__proto__ === nullvar function = new Function()function.__proto__ === Function.prototype// 另外，所有函数都是由 Function 构造出来的，所以Number.__proto__ === Function.prototype // 因为 Number 是函数，是 Function 的实例Object.__proto__ === Function.prototype // 因为 Object 是函数，是 Function 的实例Function.__proto__ === Function.prototye // 因为 Function 是函数，是 Function 的实例！]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript04]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F14%2Fjavascript04%2F</url>
    <content type="text"><![CDATA[7种数据类型JavaScript 是一种弱类型或者说动态语言。这意味着你不用提前声明变量的类型，在程序运行过程中，类型会被自动确定。这也意味着你可以使用同一个变量保存不同类型的数据。number/string/boolean/symbol/null/undefined/object number十进制 3二进制 0b11 = 3八进制 011 = 9十六进制 0x11 = 17 string多行字符串123456789不推荐var s1 = &apos;12345 \ 67890&apos;推荐var s2 = &apos;12345&apos; + &apos;67890&apos;ES6var s3 = `1234567890` boolean&amp;&amp; 与 || 或 null &amp; undefined 变量没有赋值 undefined 空对象 unll 空非对象 undefined objectkey 如果有引号，无限制如果没有引号遵循变量名命名规范符合规范的也可以使用 person.name 方式 ，注意：name 表示 ‘name’delete person.name symbol主要用于生成唯一值12345678var race = &#123; protoss: Symbol(&apos;protoss&apos;), terran: Symbol(&apos;terran&apos;), zerg: Symbol(&apos;zerg&apos;)&#125;race.protoss !== race.terran // truerace.protoss !== race.zerg // true 转换 –&gt; number string boolean symbol null undefined object number \ toString 或者 + ‘’ Boolean() 或者!! string . \ !! boolean . toString 或者 + ‘’ \ symbol . X \ null . toString报错 + ‘’ !! \ undefined . toString报错 + ‘’ !! \ object . toString 或者+ ‘’ ‘[obj Obj]’ !! \ 老司机使用 + ‘’ 代替 toString 也可以用 String() StringString(null) // “null”String(undefined) // “undefined” 七个falsy值：flase 0 NaN ‘’ “” null undefined所有对象都是true str –&gt; number Number(‘1’) === 1 parseInt(‘1’,10) === 1 parseFloat(‘1.23’) === 1.23 ‘1’ - 0 === 1 推荐 + &#39;1&#39; === 1 typeof typeof null : object typeof fn : function 转码btoa 转Base64atob 转回非ASCII码btoa(encodeURI(‘王’)) //encodeURIComponentdecodeURI(atob(“JUU3JThFJThC”)) //decodeURIComponent 简单数据直接存在 Stack复杂数据在 Stack 存储 Heap 地址，是对内存的引用。 循环引用123var a = &#123;&#125; a.self = a a.self.self 面试题12345var a = &#123;n:1&#125;;var b = a;a.x = a = &#123;n:2&#125;;alert(a.x); //undefinedalert(b.x); //[object Object] 垃圾回收如果一个对象没有被引用，将被回收。123var fn = function()&#123;&#125;document.body.onclick = fnfn = null //function()&#123;&#125; 不会被回收 深拷贝 vs 浅拷贝对于简单类型，赋值就是深拷贝改变b，完全不会影响到a针对对象浅拷贝var a = {name: ‘frank’}var b = ab.name = ‘b’a.name === ‘b’ //true深拷贝 对 Heap 内存完全拷贝]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-IFC]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F06%2Fcss012%2F</url>
    <content type="text"><![CDATA[inline formatting context font-size: 100px;类似活字印刷磨具的大小 em-square可以超出 bleed outside line-height: 100px;指定内联元素的真实占位不同字体基线对齐line-height 默认normal，值不确定，每个字体的设计师给出 vertical-align: top;实际占地面积的顶部对齐vertical-align: middle;也不靠谱，用flex,float(inline-block 也不好)align-items: center; 图片下面有空隙div 里面放一个imgimg和div里看不见的字体基线对齐？？？1.vertical-align: middle|top;2.img{display: block;}3.不要font-size: 0; inline-block 对不齐时 有空隙时用 flex float]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-bootstrap]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F06%2Fcss011%2F</url>
    <content type="text"><![CDATA[bootstrap 是给后端用的UI工具。。。bootstrap.css 完全版bootstrap.min.css 删除回车空格后的版本依赖jquery栅格系统 grid system 一共十二格row -15px;控制布局col-$大小-n 占位col-$大小-offset-n 偏移量默认响应式四个分界值0~768 xs768~992 sm992~1200 md1200~ lg]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-表单美化]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F04%2Fcss010%2F</url>
    <content type="text"><![CDATA[百度搜索栏制作 1234567891011&lt;svg&gt; &lt;use xlink:href=&quot;#icon-fake&quot;&gt;&lt;/use&gt;&lt;/svg&gt;fill: #4b94fc; svg填充颜色cursor: pointer; 手指型鼠标LVHA:link 尚未访问的链接:visited 已经访问过的链接:hover 虚指:active 激活:focus 点击、触摸、tab时触发 上传文件vertical-align: top; 消除img下方的空隙opacity: 0; 透明底层img上层inputhttps://frankfang.github.io/wheels/demos/image-picker.html 涟漪按钮transform: scale(10); 放大visibility: hidden; -&gt;visibility: visible;pointer-events: none; 穿透堆叠上下文监听鼠标点击位置放大]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-动态REM]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F03%2Fcss009%2F</url>
    <content type="text"><![CDATA[动态 REM 手机专用的自适应方案px 像素em 单位元素 font-size 计算值rem 根元素的 font-size 的倍数vh viewport high 视口高度vw viewport width 视口宽度网页默认 font-size 16pxchrome 默认最小 font-size 12px ##PC 定宽 Float/Flex 1000px手机 如何兼容各种型号Nexus 412732iphone5 320568iphone6 375667ipthon6+ 414736 响应式0~320 css1320~375 css2374~414 css3… cssn 不用宽度,用百分比 但是高度和宽度无法关联 REM 按比例缩放一切单位以宽度为基准，就能完美还原设计稿1.利用 js 实现 font-size 等于 页面宽度 1234&lt;script &gt; var pageWidth = window.innerWidth document.write('&lt;style&gt;html&#123;font-size:' + pageWidth + 'px;&#125;&lt;/style&gt;')&lt;/script&gt; 2.使用rem作为单位 优化 meta:vp 等于 页面宽度的10% 特别小的还是使用 px ：border: 1px solid red;font-size: 16px; 直接写 px，通过saas翻译成 rem (less/sass/scss/webpack) 123456789sass --watch scss:css node-sass -wr scss -o css scss 添加 @function px2rem( $px )&#123; @return $px/$designWidth*10 + rem;&#125; $designWidth : 640;调用方式：px2rem(320) sass 安装npm config set registry https://registry.npm.taobao.org/sudo npm i -g node-sass权限问题使用：sudo npm install -g –unsafe-perm node-sass]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-BFC]]></title>
    <url>%2Fhexo-blog%2F2019%2F03%2F03%2Fcss008%2F</url>
    <content type="text"><![CDATA[BFC - block formatting context - 块级格式化上下文 BFC 的产生一个块格式化上下文由以下之一创建： 根元素或其它包含它的元素 浮动元素 (元素的 float 不是 none) 绝对定位元素 (元素具有 position 为 absolute 或 fixed) 内联块 (元素具有 display: inline-block) 表格单元格 (元素具有 display: table-cell，HTML表格单元格默认属性) 表格标题 (元素具有 display: table-caption, HTML表格标题默认属性) 具有overflow 且值不是 visible 的块元素， display: flow-rootcss 3.0 新增功能，即让当前元素触发 BFC column-span: all 应当总是会创建一个新的格式化上下文，即便具有 column-span: all 的元素并不被包裹在一个多列容器中。 BFC 功能 在一个 BFC 中，盒在竖直方向一个接一个地放置，从包含块(父元素）的顶部开始。两个兄弟盒之间的竖直距离由 ‘margin’ 属性决定。同一个块格式化上下文中的相邻块级盒之间的竖直 margin 会合并。 一个 BFC 包括创建它的元素内部所有内容，除了被包含于创建新的块级格式化上下文的后代元素内的元素。翻译一下 BFC 会包含所有内部元素，除非这些元素在另外一个 BFC 中。 爸爸管儿子包含内部元素 兄弟划清界限两个 BFC 之间划清界限 清除浮动]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css布局套路]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F28%2Fcss007%2F</url>
    <content type="text"><![CDATA[调试时加盒模型，border不占宽度*{box-sizing: border-box;} float clearfix 一行多图片 nth-child wrappermargin-left: -xpx;margin-right: -xpx; flexcalcwidth: calc(25% - 8px); 手机上不要定宽高 图片使用 background属性img 很难不变形background: transparent url() no-repeat center;background-size: cover;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-flex]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F28%2Fcss006%2F</url>
    <content type="text"><![CDATA[flex 之前normal flowfloat + clearfixposition relative + absolutedisplay inline-block负 margin flex 布局特点 与方向无关 空间自动分配、自动对齐 使用于简单线性布局，负责的可以使用grid flex container 属性 flex-direction 方向 row row reverse column column reverse flex-wrap 换行 wrap nowrap wrap-reverse flex-flow 上面两项的简写 row wrap justify-content 主轴方向对齐方式 space-between space-around flex-start flex-end center align-items 侧轴对齐方式 stretch 伸展 flex start flex end center baseline 文字基线对齐 align-content 多行/列内容对齐方式 stretch 每一行拉伸填满容器 flex start 行集中在顶部 flex end 行集中在底部 space-around 每行周围保持相等距离 space-between 行与行之间保持相等距离 center flex item 属性 flex-grow 增长比例 定义如何分配多余空间，值为数字。 flex-shrink 收缩比例 空间不足时 flex-basis 默认原始大小 指定每个item 占位大小，单位px flex 上面三项的缩写 order 顺序(代替双飞翼) 指定每个item的顺序 order: 1; align-self 指定item自身对齐方式 优先级高于container]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css移动端页面（响应式）]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F28%2Fcss005%2F</url>
    <content type="text"><![CDATA[媒体查询 media query语法：1234&lt;style&gt;&lt;/style&gt;标签中@media (条件) &#123;css&#125;满足条件的才执行css@media (条件1) and (条件2) &#123;css&#125; link中，文件方式：&lt;link ref=&quot;stylesheet&quot; href=&quot;style.css&quot; media=&quot;(max-width:320px)&quot;&gt; 经典响应式网站https://www.smashingmagazine.com bootstrap 是mobile-first project 完成响应式导航demo 实际应该直接写两套，后端负责切换1234if userAgent == &apos;iphone&apos;: render iphone.htmlelse: render pc.html 淘宝,京东：1234if userAgent == &apos;iphone&apos;: redirect_to &apos;https://m.taobao.com&apos;else: redirect_to &apos;https://www.taobao.com&apos; display: flex;calc calculatewidth: calc(50% - 10px); 注意事项 学会隐藏元素display: none;display: block; 区别 手机metameta:vp No hover No resize No 滚动条 使用 touch]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css-icon专题]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F27%2Fcss004%2F</url>
    <content type="text"><![CDATA[css-icon 专题切图1、选中后 Duplicate Layer2、Image -&gt; Trim 裁剪图片3、Image -&gt; Canvas Size img 法&lt;img src=&quot;&quot; alt=&quot;&quot;&gt;img 只需要设置宽或者高，会等比例缩小 background 法12background-image: url(./qq.png); background: transparent url(./qq.png) no-repeat 0 0; background 合一法css sprites generator其实是都只显示图片的一部分 Font class 法即使用字体表示图标 iconfont.cn&entity_name;&#entity_number;font-family: iconfont;html: &#xe613;css: \e614 SVG 法SVG 也是一种代码iconfont.cn symbol 引用未来的主流，不会有锯齿 纯 CSS 法cssicon.space]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yum001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F27%2Fyum001%2F</url>
    <content type="text"><![CDATA[yum install createrepo 创建目录 不同平台需要单独存放mkdir -p /data/yum/centos/6/{i386,x86_64} 初始化repocreaterepo -p -d -o yum/centos/6/i386 yum/centos/6/i386createrepo -p -d -o yum/centos/6/x86_64 yum/centos/6/x86_64 更新repocreaterepo –workers 10 服务端配置yum install httpdchown -R apache:apache /home/yum/vim /etc/httpd/conf/httpd.conf NameVirtualHost *:80 DocumentRoot /home/yumServerName XXX.XXX.XXX #填写绑定的域名Options Indexes FollowSymlinks repo配置文件[test]name=yum testbaseurl=http://XXX.XXX.XXX/centos/6enabled=1gpgcheck=1gpgkey=http://XXX.XXX.XXX/centos/RPM-GPG-KEY-TESTREPO yumwritten in python查看yumvarpython -c ‘import yum, pprint; yb = yum.YumBase(); pprint.pprint(yb.conf.yumvar, width=1)’$releasever 发行版 7$arch cpu平台 ia32e$basearch 基本平台 x86_64 查看远程所有版本的包yum search –showduplicates orchestration]]></content>
      <categories>
        <category>yum</category>
      </categories>
      <tags>
        <tag>yum</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript03]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F26%2Fjavascript03%2F</url>
    <content type="text"><![CDATA[函数作用域全局作用域块级作用域 ES6 局部变量只能在函数内部声明其他区块声明的是全局变量1234if (true) &#123; var x = 5;&#125;console.log(x); // 5 函数内部也存在变量提升函数执行时所在的作用域，是定义时的作用域，而不是调用时所在的作用域例一1234567891011var a = 1;var x = function () &#123; console.log(a);&#125;;function f() &#123; var a = 2; x();&#125;f() // 1 例二1234567891011var x = function () &#123; console.log(a);&#125;;function y(f) &#123; var a = 2; f();&#125;y(x)// ReferenceError: a is not defined 例三1234567891011function foo() &#123; var x = 1; function bar() &#123; console.log(x); &#125; return bar;&#125;var x = 2;var f = foo();f() // 1 参数参数是原始类型（数字、字符、布尔），传值传递12345678var p = 2;function f(p) &#123; p = 3;&#125;f(p);p // 2 参数是符合类型（数组、对象、其他函数），传址传递 例外：如果替换掉整个参数，不会影响原始值，重新赋值导致指向另一个地址12345678910111213141516171819var obj = &#123; p: 1 &#125;;function f(o) &#123; o.p = 2;&#125;f(obj);obj.p // 2---------------------var obj = [1, 2, 3];function f(o) &#123; o = [2, 3, 4];&#125;f(obj);obj // [1, 2, 3] 闭包将函数内外连接的桥梁函数内部定义函数作用： 避免使用全局变量 读取函数内部变量 使它的诞生环境留存 封装对象的私有属性和方法缺点： 内存消耗大外层函数每次运行，都会生成一个新的闭包，而这个闭包又会保留外层函数的内部变量，所以内存消耗很大。在退出函数之前把不使用的局部变量全部删除 例一：123456function f1() &#123; var n = 999;&#125;console.log(n)// Uncaught ReferenceError: n is not defined 例二：12345678910function f1() &#123; var n = 999; function f2() &#123; console.log(n); &#125; return f2;&#125;var result = f1();result(); // 999 例三：1234567891011function createIncrementor(start) &#123; return function () &#123; return start++; &#125;;&#125;var inc = createIncrementor(5);inc() // 5inc() // 6inc() // 7 例四：12345678910111213141516171819function Person(name) &#123; var _age; function setAge(n) &#123; _age = n; &#125; function getAge() &#123; return _age; &#125; return &#123; name: name, getAge: getAge, setAge: setAge &#125;;&#125;var p1 = Person(&apos;张三&apos;);p1.setAge(25);p1.getAge() // 25 立刻调用函数表达式 IIFE 不必为函数命名 避免污染全局变量 封装一些私有变量1234567891011// 写法一 badvar tmp = newData;processData(tmp);storeData(tmp);// 写法二 good(function () &#123; var tmp = newData; processData(tmp); storeData(tmp);&#125;());]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql-pt 套件使用 001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F26%2Fmysql001%2F</url>
    <content type="text"><![CDATA[percona-xtrabackup不停机备份工具yum install -y percona-xtrabackup 连接mysql服务器xtrabackup --user=DVADER --password=14MY0URF4TH3R --backup --target-dir=/data/backups/ 创建备份xtrabackup --backup --target-dir=/data/backups/ 准备备份 – 处理一致性xtrabackup --prepare --target-dir=/data/backups/ 恢复备份rsync -avrP /data/backups/ /var/lib/mysql/rsync -avz /root/wzl/backups/ root@100.68.8.27:/var/lib/mysql/ 修改权限chown -R mysql:mysql /var/lib/mysql 跳过单个主备不一致12set global sql_slave_skip_counter=1;start slave; 查看每个表的数据大小这个不准不要用！select table_name,table_rows,data_length/1024/1024 &quot;data_length&quot; from information_schema.tables where table_schema in (&#39;neutron&#39;,&#39;keystone&#39;) order by table_rows desc; percona-toolkit依赖12rpm -qa perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL yum install -y perl-DBI perl-DBD-MySQL perl-Time-HiRes perl-IO-Socket-SSL perl-Digest perl-Digest-MD5 perl-TermReadKey 安装123https://www.percona.com/downloads/percona-toolkit/LATEST/ rpm -ivh percona-toolkit rpm -ivh percona-toolkit-debuginfo 确认12pt-query-digest -help pt-table-checksum -help 权限12CREATE USER &apos;new_root&apos;@&apos;%&apos; IDENTIFIED BY &apos;***&apos;; GRANT ALL PRIVILEGES ON *.* TO &apos;new_root&apos;@&apos;%&apos; IDENTIFIED BY &apos;***&apos; WITH GRANT OPTION; –create-replicate-table 只有第一次需要 检查数据库的一致性pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --databases=neutron,keystone h=192.168.1.102,u=root,p=root,P=3306 检查表的一致性pt-table-checksum --nocheck-replication-filters --no-check-binlog-format --replicate=neutron.checksums --create-replicate-table --databases=neutron --tables=haha h=192.168.1.101,u=root,p=123456,P=3306 只打印pt-table-sync --replicate=neutron.checksums h=192.168.1.101,u=root,p=123456 h=192.168.1.102,u=root,p=123456 --print 执行修复pt-table-sync --replicate=neutron.checksums h=192.168.1.101,u=root,p=123456 h=192.168.1.102,u=root,p=123456 --execute binlog以二进制日志记录了所有的 DDL(数据定义) 语句 和 DML(数据操作) 语句。语句以事件保存，不包括查询语句，主要用于数据的恢复和复制。1234567891011show binary logs;mysqlbinlog mysqld-bin.000001-d -databasemysqlbinlog -d neutron mysqld-bin.000001 &gt; neutron.txt-D --disable-log-bin 禁用mysqlbinlog -D mysqld-bin.000001-s --short-form 只输出sql--start-datetime--stop-datetime--start-position--stop-position 远程读取123-R --read-from-remote-server -h --host mysqlbinlog -R -h 192.168.0.1 -p root mysqld-bin.000001 批量删除表1Select CONCAT( &apos;drop table &apos;, task_id, &apos;;&apos; )FROM task Where start_time = &apos;1999-01-01 01&apos; and end_time &lt; &apos;2019-01-01 01&apos;; event_scheduler123456789101112131415161718192021222324252627282930313233343536SET GLOBAL event_scheduler=1;USE keystone;DELIMITER $$CREATE EVENT IF NOT EXISTS token_expire_remove ON SCHEDULE EVERY 1 DAY STARTS TIMESTAMP &apos;2019-03-20 02:00:00&apos;DOBEGINSTART TRANSACTION;SET @timenow=now();DELETE FROM token WHERE expires &lt; @timenow;COMMIT;END $$DELIMITER ;-------------------------------SET GLOBAL event_scheduler=1;USE bonree;DELIMITER $$CREATE EVENT IF NOT EXISTS table_expire_remove ON SCHEDULE EVERY 1 DAY STARTS TIMESTAMP &apos;2019-03-20 02:00:00&apos;DOBEGINSTART TRANSACTION;SET @timenow=now();SET @enddate=date_add(@timenow,interval -1 quarter);SET @exeSql=&quot;SELECT CONCAT(&apos;DROP TABLE &apos;, task_id, &apos;;&apos;)FROM task WHERE start_time=&apos;1999-01-01 01&apos; AND end_time &lt; @enddate;&quot;;PREPARE stmt FROM @exeSql;EXECUTE stmt;DELETE FROM task WHERE start_time=&apos;1999-01-01 01&apos; AND end_time &lt; @enddate;COMMIT;END $$DELIMITER ;-------------------------------查看:show processlist;持久化:event_scheduler=ON 压缩binlogtar -zcvf mysql-bin.000001.tar.gz /var/lib/mysql/mysql-bin.000001;find -name &#39;mysql-bin.0000*&#39; ! -name &#39;*.gz&#39; -exec tar -zcvf {}.tar.gz {} \;find -name &#39;mysql-bin.0000*&#39; ! -name &#39;*.gz&#39; -exec echo {} \;]]></content>
      <categories>
        <category>db</category>
      </categories>
      <tags>
        <tag>mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识network001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F25%2Fnetwork001%2F</url>
    <content type="text"><![CDATA[网卡临时添加ip 12ifconfig eth0 10.25.114.30 netmask 255.255.255.192 upifconfig eth0 30.30.3.67 netmask 255.255.255.192 broadcast 30.30.3.127 up 添加静态路由 12345678910route add -net 10.25.0.0/16 gw 30.30.3.65route del -net 0.0.0.0/0 gw 192.168.68.229route add -net 10.25.91.0 gw 10.25.114.1 netmask 255.255.255.0 dev eth0 metric 0route del -net 10.25.91.0 gw 10.25.114.1 netmask 255.255.255.0 dev eth0sudo route add -net default gw 10.25.60.161 netmask 0.0.0.0 dev eth0 metric 1sudo route del -net default gw 10.25.60.161 netmask 0.0.0.0 dev eth0 metric 1ip route add 10.25.0.0/16 via 10.25.60.161 dev eth0 ethtoolethtool ens5f1 lldptoollldptool -t -n -i ens5f1 bondcat /proc/net/bonding/bond0 没有自动分配ip需要在/etc/sysconfig/network-scripts 里面增加 ifcfg-eth1 并且使用dhcp arparp -n|grep 30.30.3.66 vlancat /proc/net/vlan/config cpu cat /proc/cpuinfo | grep &quot;cores&quot;|uniq 磁盘 123456fdisk -l|grep -i diskvgscat /proc/partitionspartprobe -spvcreate /dev/sdbvgextend VolGroup00 /dev/sdb]]></content>
      <categories>
        <category>network</category>
      </categories>
      <tags>
        <tag>ip</tag>
        <tag>route</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python问题记录001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F25%2Fpython001%2F</url>
    <content type="text"><![CDATA[@property 方法？]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识css003]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F23%2Fcss003%2F</url>
    <content type="text"><![CDATA[body 默认margin 8px 使用link引用 文字两端对齐12345678910111213141516span&#123; border: 1px solid green; display: inline-block; width: 5em; text-align: justify; line-height: 20px; overflow: hidden; height: 20px; &#125;span::after&#123; content: ''; display: inline-block; width: 100%; border: 1px solid blue; &#125; 文字断行word-break: break-all;使用连字符: - 文字省略不换行white-space: nowrap;超出部分隐藏overflow: hidden;超出部分以…显示text-overflow: ellipsis; 多行省略搜索:css multi line text ellipsis &#123;123456border: 1px solid red;display: -webkit-box;-webkit-line-clamp: 2;-webkit-box-orient: vertical;overflow: hidden;&#125; 转化123height 40px -&gt;line-height: 24px;padding: 8px 0; margin 合并如果有东西挡住，不会合并否则会合并 1:1自适应的divborder: 1px solid red;padding-top: 100%; 理解堆叠上下文当不在同一个堆叠上下文中，可以理解为不在同一个部门中部门级别高的，一定更高 形成堆叠上下文的条件 z-index 值不为 “auto”的 绝对/相对定位 根元素 (HTML) 完整的条件查看:形成堆叠上下文的所有条件MDN]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识javascript02]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F23%2Fjavascript02%2F</url>
    <content type="text"><![CDATA[事件// 键盘事件onkeypress// 鼠标点击onclick// 错误onerror// 按住鼠标onmousedown// 移动鼠标onmousemove// 松开鼠标onmouseup// touch 事件ontouchstartontouchmoveontouchend search js detect touch支持 touch null 不支持 touch undefineddocument.body.ontouchstart !== undefined‘ontouchstart’ in document.body getElementByIdcreateElementappendChild 坐标鼠标的坐标clientXclientY触控的坐标 // 注意有多点触控touches[0].clientXtouches[0].clientY小 tips：(x-3) (y-3)canvas 不需要 canvas 默认样式inline-block不能通过 css width height指定画布大小解决方案：获取初始viewport宽高var pageWidth = document.documentElement.clientWidthvar pageHeight = document.documentElement.clientHeightcanvas.width = pageWidthcanvas.height = pageHeight动态调整window.onresize时再次获取 初始化var ctx = canvas.getContext(‘2d’) 矩形ctx.fillStyle = ‘red’;ctx.fillRect(10,10,100,100); //rectangle 矩形分别代表x,y,长,宽 ctx.strokeStyle = ‘yellow’;ctx.strokeRect(10,10,100,100); //stroke 描边 ctx.clearRect(50,50,10,10); //橡皮擦 三角形ctx.fillStyle = ‘red’;ctx.beginPath();ctx.moveTo(240,240);ctx.lineTo(300,240);ctx.lineTo(300,300);ctx.fill(); 圆弧ctx.beginPath();ctx.arc(150,150,20,0,Math.PI2); // x,y,半径,开始弧度,结束弧度弧度=(Math.PI/180)角度。ctx.fill(); //填充ctx.stroke(); //描边 canvas 画图时坐标是相对于viewport的而不是body1.可以去掉body的margin 解决填充频率的方法：使用canvas在两点间画线 画线ctx.beginPath()ctx.moveTo(0,0)ctx.lineTo(100,0)ctx.stroke() //需要closePath闭合ctx.fill() //会自动闭合ctx.closePath() ctx.lineWidth = 10; //线宽 点击开关eraserEnabled = !eraserEnabled 关于画笔 橡皮檫使用两个按钮表示如果将if else 表示为平铺直叙，会减少代码bug 禁用滚动preventDefault()]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识javascript01]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F21%2Fjavascript01%2F</url>
    <content type="text"><![CDATA[javascript 不一定要以;结尾 1234var a = 1;等价于var a;a = 1; 变量提升 123456var a = 1;在实际代码执行中会变成：var a;console.log(a);a = 1;最后的结果是显示 undefined 变量命名规则 第一个字符，可以是任意 unicode 字符 (包括英文字母和其他语言的字母） ，以及美元符号 ($) 和下划线 (_) 第二个字符，除了 Unicode 字母、美元符号和下划线，还可以使用数字0-9。 if 语句 123456789if (m === 0) &#123; // ...&#125; else if (m === 1) &#123; // ...&#125; else if (m === 2) &#123; // ...&#125; else &#123; // ...&#125; switch 语句 123456789101112var x = 1;switch (x) &#123; case 1: console.log(&apos;x 等于1&apos;); break; case 2: console.log(&apos;x 等于2&apos;); break; default: console.log(&apos;x 等于其他值&apos;);&#125; 三元运算符 12（条件）? 表达式1 : 表达式2var even = (n % 2 === 0) ? true : false; while 循环 12345var i = 0;while(i &lt; 100) &#123; console.log(i) i += 1;&#125; for 循环 1234var x = 3;for (var i = 0; i &lt; x; i++) &#123; console.log(i)&#125; do while 循环 123456var x = 3;var i = 0;do &#123; console.log(i); i++;&#125; while (i &lt; x); label + break | continue 1234567891011121314151617181920212223242526top: for (var i = 0; i &lt; 3; i++)&#123; for (var j = 0; j &lt; 3; j++)&#123; if (i === 1 &amp;&amp; j === 1) break top; console.log(&apos;i=&apos; + i + &apos;, j=&apos; + j); &#125; &#125;// i=0, j=0// i=0, j=1// i=0, j=2// i=1, j=0top: for (var i = 0; i &lt; 3; i++)&#123; for (var j = 0; j &lt; 3; j++)&#123; if (i === 1 &amp;&amp; j === 1) continue top; console.log(&apos;i=&apos; + i + &apos;, j=&apos; + j); &#125; &#125;// i=0, j=0// i=0, j=1// i=0, j=2// i=1, j=0// i=2, j=0// i=2, j=1// i=2, j=2 NaN NaN 特殊值，表示非数字 NaN 是数字类型，表示执行数学运算失败的结果 NaN === NaN //false]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识git-hook01]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F14%2Fgit-hook01%2F</url>
    <content type="text"><![CDATA[git hook 简介git hook可以在特定操作之前或者之后执行自定义的脚本 待研究在提交代码后，自动部署静态页面主要使用post-receive实现 客户端钩子commit-msgpre-commit 提交之前post-commit 提交之后 服务器钩子pre-receive 接受之前update 更新之前post-update 更新之后post-receive 接受之后 pre-commit hook检查提交信息123456789101112131415161718192021222324252627282930#!/usr/bin/env bashregularExpression="^\s?\[(feature|bugfix|refactor|other)\]\s?\[.+\]\s?.+"error_msg="-----------------------------------------------提交信息首行请按照如下格式书写:[commitType][module] descriptiondetail ...1. commitType只能是feature（新功能）、bugfix（修复bug）、refactor（重构）、other（其他）2. module 则为对应的功能模块，如: lvsfullnat pa_nat 等3. description 简单描述改动。4. detail 详细描述改动。-----------------------------------------------例如：[feature][lvsfullnat-2.17] 自动解绑pool1.neutron_lbass/service/pa_lvs/pa_lvs_plugin.py 删除时判断，如果是最后一个member，自动解绑pool。2.neutron_lbass/db/loadbalancer_lvsdb.py 修改对应的 orm 函数 delete_pool_member" #获取提交信息firstLine=`head -n1 "$1"`echo -e "你的提交信息如下: \n$firstLine"if [[ "$firstLine" =~ $regularExpression ]]; then echo "commit success" exit 0fiecho "commit fail"echo -e "你的提交信息如下：\n`cat .git/COMMIT_EDITMSG`"echo "$error_msg" &gt;&amp;2exit 1]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识python打包01]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F14%2Fpython002%2F</url>
    <content type="text"><![CDATA[rpm包python setup.py bdist_rpm wheel包pip install wheelpython setup.py bdist_wheel]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[algorithm001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F12%2Falgorithm001%2F</url>
    <content type="text"><![CDATA[伪代码可以自己定义语法，不用纠结细节 流程图开始结束圆角正常步骤方形分支语句菱形 算法输入输出明确性有限性有效性 解决问题分析问题，想出数据结构想出对应的算法 算法分类分治法动态规划法贪婪算法线性规划法简并法]]></content>
  </entry>
  <entry>
    <title><![CDATA[css002]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F05%2Fcss002%2F</url>
    <content type="text"><![CDATA[css generator可以自动生成css代码 如何使用CSS做出：1.左右布局123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;div class="left-half"&gt; 左边 &lt;/div&gt; &lt;div class="right-half"&gt; 右边 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 使用背景渐变123456789.container &#123; background-image: linear-gradient( to right, #f7941d 0%, #f7941d 50%, #8d5022 50%, #8d5022 100%);&#125; 使用绝对定位123456789101112131415161718.container &#123; width: 100%; position: relative;&#125;.left-half &#123; background-color: #f7941d; position: absolute; left: 0px; width: 50%;&#125;.right-half &#123; background-color: #8d5022; position: absolute; right: 0px; width: 50%;&#125; 使用假表12345678910111213141516.container &#123; display: table;&#125;.left-half,.right-half &#123; display:table-cell;&#125;.left-half &#123; background: #f7941d;&#125;.right-half &#123; background: #8d5022;&#125; 使用float1234567891011121314151617181920212223242526.left-half,.right-half &#123; float: left;&#125;.left-half &#123; background: #f7941d; width: 50%;&#125;.right-half &#123; background: #8d5022; width: 50%;&#125;注意，父元素需要class=clearfix,因为float会使div脱离文档流，需要clearfix把后面正常参与文档流的内容后挪，不然会造成div中的内容与后面的内容视觉上重合。.clearfix::after&#123; content: ''; display: block; clear: both;&#125;&lt;!--IE8以下 支持--&gt;.clearfix&#123; zoom: 1;&#125; 使用inline-block123456789.left-half &#123; background: #f7941d; display: inline-block;&#125;.right-half &#123; background: #8d5022; display: inline-block;&#125; 使用flexbox12345678910111213141516171819.container &#123; display: flex; height: 100px;&#125;.left-half,.right-half &#123; height: 100%;&#125;.left-half &#123; background: #f7941d; flex: 1;&#125;.right-half &#123; background: #8d5022; flex: 1;&#125; 使用grid12345678910111213.container &#123; display: grid;&#125;.left-half &#123; background: #f7941d; grid-column: 1;&#125;.right-half &#123; background: #8d5022; grid-column: 2;&#125; 左中右布局123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;div class="left"&gt; 左边 &lt;/div&gt; &lt;div class="center"&gt; 中间 &lt;/div&gt; &lt;div class="right"&gt; 右边 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 1.float123456789101112131415161718.left ,.center,.right &#123; float: left; width: 30%&#125;.left &#123; background: red;&#125;.center &#123; background: #f7941d;&#125;.right &#123; background: #8d5022;&#125; 2.float + inline-block1234567891011121314151617181920212223container &#123; width:100%; text-align:center;&#125;.left &#123; float:left; width:200px; background: red;&#125;.center &#123; display: inline-block; margin:0 auto; width:200px; background: yellow;&#125;.right &#123; float:right; width:200px; background: blue;&#125; 3.flexbox css3123456789101112131415.container &#123; display: flex; flex-direction: row; flex-wrap: nowrap; justify-content: space-between; background-color: lightyellow;&#125;.left ,.center ,.right &#123; width: 100px; height: 100px; border: 2px dashed red;&#125; 水平居中内联元素：text-align: center;块级元素：margin: 0 auto; 垂直居中1.不知道高度，绝对定位123456789.parent &#123; position:relative; &#125;.child &#123; position: absolute; top: 50%; transform: translateY(-50%); &#125; 2.父元素高度已知，相对定位123456789.parent &#123; height:xxx; &#125; .child &#123; position: relative; top: 50%; transform: translateY(-50%); &#125; 3.flex123456.parent &#123; display: flex;/*Flex布局*/ display: -webkit-flex; /* Safari */ align-items: center;/*指定垂直居中*/ justify-content: center;/*指定水平居中*/&#125; 4.table 居中，适用于IE 5.不写父元素高度，使用padding补，天然垂直居中。 等其他小技巧]]></content>
  </entry>
  <entry>
    <title><![CDATA[macos]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F04%2Fmacos%2F</url>
    <content type="text"><![CDATA[1Clipboard剪贴板工具opt + com + v zsh 插件 zsh-autosuggesionsautojumpzsh-syntax-highlightingdotenv vim yd有道词典翻译工具 xScope设计师工具 axure产品原型设计工具 window tidy窗口分屏 colorsnapper2取色工具 IDEpycharmwebstormIDE 插件 translation ideavim IDE 快捷方式 替换 command + r 正则([a-z]) -&gt; &#39;$1&#39;, brew npm postman navicat compare ipython tmux 系统快捷键command + 空格 聚焦搜索font mac 字体查看 iTerm2command + D 垂直分屏shift + command + D 水平分屏command + w 关闭command + u 透明背景 装机软件 Balsamiq Mockups3 原型图绘制软件 SketchBook Pro 画图软件 KeyCastr 显示按键 gifox 截图工具 Alfred 搜索工具 Typora markdown工具 Dash 文档阅读工具 Moon 双屏控制工具 CheatSheet 快捷键提示工具]]></content>
  </entry>
  <entry>
    <title><![CDATA[chrome001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F02%2Fchrome001%2F</url>
    <content type="text"><![CDATA[开发者工具的使用 打开 MacOption + Command + JOption + Command + I Win/LinuxCtrl + Shift + JCtrl + Shift + I 键盘F12 刷新Command + R Console 面板Shift + Enter 换行 Preserve log保留日志：1.可以保留跳转的日志 搜索 tips排除某个关键字阻止手机 980 -索爱 切换页签]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bash002]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F01%2Fbash002%2F</url>
    <content type="text"><![CDATA[du从小到大显示所有的文件(包含隐藏文件)du -ahd1|sort -h egrepegrep “^[^#]” /etc/neutron.conf 不太理解 crontab 123456789* * * * * command 分 时 日 月 周 命令第1列表示分钟1～59 每分钟用*或者 */1表示 第2列表示小时1～23（0表示0点） 第3列表示日期1～31 第4列表示月份1～12 第5列标识号星期0～6（0表示星期天） 第6列要运行的命令 0 4 * * 0 /usr/bin/systemctl stop ntpd &amp;&amp; /usr/sbin/ntpdate 192.168.0.1 &amp;&amp; /usr/bin/systemctl start ntpd ln -s 源文件 链接文件 统计 ls -l|grep “^-“|wc -l ls -l|grep “^d”|wc -l -R 递归 tar tar -czvf target.tar.gz dir tar -xzf source.tar.gz -C dir grep grep -C 3 Failed (context around 3 lines) grep -E ‘2019-03-18 18:4[0-9]|2019-03-18 18:5[0-9]’ 正则匹配某个时间段的日志 grep -i 不区分大小写 watch watch command watch -n 60 command watch -d ls -l 监控目录变化 获取用户输入，定义变量 read -p “Input the Instance Name: “ InstName]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F01%2Fcss001%2F</url>
    <content type="text"><![CDATA[CSS 学习加载css方式1234内联 style 属性style 标签&lt;link rel="stylesheet" href="./a.css"&gt;@import url(./a.css); clearfix12345.clearfix::after&#123; content: ''; display: block; clear: both;&#125; 横向布局方式float 出现的原因: 图文混排 父模块 clearfix 子模块 float: left; display: inline-block;有bug 背景背景图片background-image:url(./1.JPG); 背景颜色background: #F7F8FA; 16进制 字体 font-family: “Arial Black”; font-size: 13px; font-weight: normal; bold; 加粗 font-style: normal; italic;斜体 oblique;倾斜体 color: rgba(255, 255, 255, 0.7); 下划线 text-decoration: none; 取消下划线 内边距 padding12345678910111213141516padding-top: 1px;padding-right: 1px;padding-bottom: 1px;padding-left: 1px;padding: 0; #四个边#垂直方向| 水平方向padding: 5px 0; 垂直方向 水平方向#顶部| 水平方向| 底部padding: 1px 2px 3px;#上右下左，顺时针方向padding: 1px 1px 1px 1px; padding: inherit; 外边距 margin123456789margin-top:margin-right:margin-bottom:margin-left:margin: top right bottom leftmargin: 0;margin 取值支持：auto &lt;percentage&gt; &lt;length&gt;length 包含两种：em 字距 px 像素 列表样式list-style1234list-style: none; 无样式circle; 圆点标记square inside; 方点标记 ###border 边框 支持三种属性： width 宽度 style 样式 color 颜色 支持四个方向 border-bottom border-bottom: 3px solid transparent; 3像素坚实透明 border-bottom-color: #DC6465; border 调试大法border: 1px solid red; text-align 行内对齐 text-align: left; center; justify-all; CSS层级关系1234有&gt; 代表固定的层级关系.TopNavBar &gt; nav &gt; ul &gt; li &gt; a无&gt;代表不固定的层级关系，可能存在多级跳跃。.TopNavBar nav &gt; ul &gt; li &gt; a 三角形变换100px solid transparent;1234567width: 10px;height: 10px;border-top-color: black;border-right-color: blue;border-bottom-color: green;border-left-color: red;border-top-width: 0px; box-sizing content-box 是默认值当设置元素的宽和高时，只会应用到内容区。如果元素有padding和border实际宽度 = width + padding + border border-boxwidth = 内容 + padding + border一些专家甚至建议将所有元素的box-sizing 都设置为border-box display inline都在一行里面设置width、height无效margin、padding 垂直方向无效水平方向有效 block每个独占一行width、height、margin、padding都可以设置 inline-block既呈现为inline，又呈现为block内联对象会排列在同一行但是也可以设置高、宽 渐变12345background: linear-gradient(to bottom, #ffffff 0%, #ffffff 50%, #000000 50%, #000000 100%); webpage free psdpsd 是ps使用的文档格式]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jetbrains]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F01%2Fjetbrains%2F</url>
    <content type="text"><![CDATA[surround with mac:option + command + T win:ctrl + alt + T ##格式化代码 mac: command + option + L win: ctrl + alt + L]]></content>
      <categories>
        <category>jetbrains</category>
      </categories>
      <tags>
        <tag>jetbrains</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bash001]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F31%2Fbash001%2F</url>
    <content type="text"><![CDATA[转载自：LinuxTOY 编辑命令 Ctrl + a ：移到命令行首 Ctrl + e ：移到命令行尾 Ctrl + f ：按字符前移（右向） Ctrl + b ：按字符后移（左向） Alt + f ：按单词前移（右向） Alt + b ：按单词后移（左向） Ctrl + xx：在命令行首和光标之间移动 Ctrl + u ：从光标处删除至命令行首 Ctrl + k ：从光标处删除至命令行尾 Ctrl + w ：从光标处删除至字首 Alt + d ：从光标处删除至字尾 Ctrl + d ：删除光标处的字符 Ctrl + h ：删除光标前的字符 Ctrl + y ：粘贴至光标后 Alt + c ：从光标处更改为首字母大写的单词 Alt + u ：从光标处更改为全部大写的单词 Alt + l ：从光标处更改为全部小写的单词 Ctrl + t ：交换光标处和之前的字符 Alt + t ：交换光标处和之前的单词 Alt + Backspace：与 Ctrl + w 相同类似，分隔符有些差别 [感谢 rezilla 指正] 重新执行命令 Ctrl + r：逆向搜索命令历史 Ctrl + g：从历史搜索模式退出 Ctrl + p：历史中的上一条命令 Ctrl + n：历史中的下一条命令 Alt + .：使用上一条命令的最后一个参数 控制命令 Ctrl + l：清屏 Ctrl + o：执行当前命令，并选择上一条命令 Ctrl + s：阻止屏幕输出 Ctrl + q：允许屏幕输出 Ctrl + c：终止命令 Ctrl + z：挂起命令 Bang (!) 命令 !!：执行上一条命令 !blah：执行最近的以 blah 开头的命令，如 !ls !blah:p：仅打印输出，而不执行 !$：上一条命令的最后一个参数，与 Alt + . 相同 !$:p：打印输出 !$ 的内容 !*：上一条命令的所有参数 !:p：打印输出 ! 的内容 ^blah：删除上一条命令中的 blah ^blah^foo：将上一条命令中的 blah 替换为 foo ^blah^foo^：将上一条命令中所有的 blah 都替换为 foo 友情提示：以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 set -o emacs 设置。 ^S、^Q、^C、^Z 是由终端设备处理的，可用 stty 命令设置。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim学习]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F31%2Fvim001%2F</url>
    <content type="text"><![CDATA[vim教程vimtutoroperator [number] motionvim支持重复操作，只要在motion前加入[number] 移动12345678光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。h (左移)j (下行) k (上行) l (右移)行首：0行尾：$ 进入1vim $file 退出12:q! 放弃所有改动。:wq 保存改动。 插入123456o 在光标下方插入一行。O 在光标上方插入一行。i 在光标前插入文本a 在光标后插入文本。A 在光标所在的行末之后插入文本。 operator [number] motion123456789在正常模式下修改命令的格式是：operator [number] motion其中：operator - 操作符，代表要做的事情，比如 d 代表删除[number] - 可以附加的数字，代表动作重复的次数motion - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，e 使光标移动到单词末尾。 2w #向前移动两个单词3e #向前移动三个单词的末尾0 #移动到行首 撤销123撤消以前的操作：u撤消在一行中所做的改动：U撤消以前的撤消命令，恢复以前的操作结果：CTRL-R 删除、复制、粘贴1234567891011121314151617181920212223242526在正常模式下删除光标所在位置的字符：x从当前光标删除至下一个单词：dw从当前光标删除至当前行末尾：d$删除整行：dd删除到当前单词末尾：de 删除到某个字符为止：dt$字符2dd #ndd删除多行d4w&amp;d3w #删除大写字母单词 this line FGHI JK LMN OP of words is Q RS TUV cleaned up.—》this line of words is cleaned up.yy-p #即复制粘贴删除后的内容，会放在vim寄存器中，使用p可以粘贴。内容置于光标之后，如果删除的是整行，将置于当前光标所在行的下一行。#粘贴所有ggyG%y#删除所有ggdG%d删除以#号开头的行：:g/^#/d删除空白行：:g/^$/d 替换12345678910111213r 替换光标所在位置 R 进入替换模式，按 &lt;ESC&gt; 键回到正常模式。ce 可以替换当前光标到单词末尾的内容；c$ 可以替换当前光标到行末的内容。cwc [number] e|w #多个单词的替换行内替换第一个字符串:s/old/new行内替换所有字符串:s/old/new/g在两行内替换所有字符串:#,#s/old/new/g文件内替换所有字符串:%s/old/new/g全文替换时确认每个替换:%s/old/new/gc 跳转123456789CTRL-G 显示光标所在位置和文件信息。G 将光标跳转至文件最后一行。gg 将光标跳转至文件第一行。[number]G #跳转任意行ctrl+f 向下翻页ctrl+b 向上翻页ctrl+d 向下半页ctrl+u 向上半页 查找123456789/ $str 正向查找字符串。? $str 反向查找字符串。n 键重复上一次的命令N 向相反方向查找CTRL-O 跳转回旧的位置，CTRL-I 带您到较新的位置。SHIFT * 选中单词查找如果光标当前位置是括号(、)、[、]、&#123;、&#125;，按 % 会将光标移动到配对的括号上。 编码常用12345678910111213141516171819zo 打开代码折叠zc 关闭代码折叠注：可以是任意的成对符号，比如&apos; &quot; ( [ &#123; &lt;ci$ 更改符号内的文本di$ 删除符号内的文本yi$ 复制符号内的文本vi$ 选中符号内的文本i-&gt;a 即包括符号一起复制系统剪贴板内容到vimreg 查看寄存器按照提示操作，最后需要加上p复制vim到系统剪贴板&quot;+yy 复制当前行&quot;+ny 复制n行默认使用系统剪切板set clipboard=unnamed 外部命令12345678910111213141516:!command 用于执行一个外部命令 command。请看一些实际例子：(MS-DOS) (Unix):!dir :!ls - 用于显示当前目录的内容。:!del FILENAME :!rm FILENAME - 用于删除名为 FILENAME 的文件。:w FILENAME 将当前 VIM 中编辑的文件保存到FILENAME中。v motion :w FILENAME 将编辑文件中可视模式下选中的内容保存到FILENAME 中。:r FILENAME 读取磁盘文件 FILENAME 将其插入到当前文件的光标位置后。:r !dir 可以读取 dir 命令的输出并将其放到当前文件的光标后面。:e! 重新载入文件 选项设置1234567:set xxx ，一些有用的选项如下：&apos;ic&apos; &apos;ignorecase&apos; 查找时忽略字母大小写&apos;is&apos; &apos;incsearch&apos; 查找短语时显示部分匹配&apos;hls&apos; &apos;hlsearch&apos; 高亮显示所有的匹配短语选项名可以用完整版本，也可以用缩略版本。在选项前加上 no 可以关闭选项： :set noic 帮助1234567891011121314:help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。:help cmd 可以找到关于 cmd 命令的帮助。CTRL-W CTRL-W 可以使您在窗口之间跳转。:q 以关闭帮助窗口可以创建 vimrc 启动脚本文件用来保存偏好设置。读取vimrc 示例文件 :r $VIMRUNTIME/vimrc_example.vim输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。按 &lt;TAB&gt; 可以使用一个补全。 以后再研究z 和 fzf 快速搜索zsh 比vim更好用 ColorPix 取色工具]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown说明]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[本文转载自 younghz的markdown库 部分内容稍作增改 主要内容 Markdown是什么？谁创造了它？为什么要使用它？怎么使用？谁在用？尝试一下 正文Markdown是什么？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 谁创造了它？它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于2013年1月11日自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 他有着足以让你跪拜的人生经历： 14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。 为什么要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail, MarkdownOutlook) 摆脱Word（我不是认真的）。 怎么使用？如果不算扩展，Markdown的语法绝对简单到让你爱不释手。 Markdown语法主要分为如下几大部分：标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’。 标题两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 2）使用#，可表示1-6级标题。 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如： > 区块引用>&gt; 嵌套引用 效果： 区块引用 嵌套引用 代码和语法高亮代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main(){ printf(“Hello, Markdown.”);} 代码区块： void main() { printf(&quot;Hello, Markdown.&quot;); } 注意:需要和普通段落之间存在空行。 行内代码本文是一篇介绍`Markdown`的文章 效果：本文是一篇介绍Markdown的文章 语法高亮 ```html Syntax Highlighting``` 效果：1&lt;div&gt;Syntax Highlighting&lt;/div&gt; ```python s = “Python syntax highlighting” print s``` 效果：12s = "Python syntax highlighting"print s 强调在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，_斜体_粗体，粗体 列表使用·、+、或-标记无序列表，如： -（+*） 第一项-（+*） 第二项- （+*）第三项 注意：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线分割线最常使用就是三个或以上*，还可以使用-和_。 链接链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https://github.com/younghz/Markdown “Markdown”)。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https://github.com/younghz/Markdown “Markdown”[2]:https://github.com/younghz/Markdown “Markdown” 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;不出现在区块中。 图片添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 行内式： ![替代文字](http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字”) 效果： 参考式： ![替代文字][logo][logo]:http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字” 效果：![替代文字][logo][logo]:markdown/logo.png “标题文字” 注意：Markdown还支持传统html写法，比如&lt;a href=”https://www.w3cschool.cn/&quot;\&gt;W3Cschool&lt;/a> 反斜杠\相当于反转义作用。使符号成为普通符号。 符号’`’起到标记作用。如： `ctrl+a` 效果： ctrl+a 表格列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 颜色和字体&lt;font color=0433ff face=&quot;verdana&quot; size=&quot;3&quot;&gt;颜色和字体&lt;/font&gt; 效果： 颜色和字体 谁在用？Markdown的使用者： GitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 尝试一下 Chrome下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。 在线的dillinger.io评价也不错 Windowns下的MarkdownPad也用过，不过免费版的体验不是很好。 Mac下的Mou是国人贡献的，口碑很好。 Linux下的ReText不错。 当然，最终境界永远都是笔下是语法，心中格式化 :)。 注意：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber](http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。 以上基本是所有traditonal markdown的语法。 关于其它扩展语法可参见具体工具的使用说明。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html语言学习01]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhtml001%2F</url>
    <content type="text"><![CDATA[起源 HTML 全称 HyperText Markup Language 超文本标记语言，常与CSS、JavaScript一起设计网页。 HTML 主要负责网站的结构和内容 CSS 主要负责网站的样式 JavaScript 主要负责网站的行为 HTML和CSS的标准均由W3C(万维网联盟)指定和发布 本文主要介绍HTML5的常用标签 HTML 学习网站 MDN W3school Quizlet HTML 常用标签a anchor 锚元素 可以创建一个到其他网页、文件、同一页面其他位置、电子邮件地址或者其他URL的超链接 描述部分可以嵌套img使用 _top/_blank/_parent/_slef 示例：&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt; 伪协议，待补充。&lt;a href=&quot;javascript:;&quot; name=&quot;price&quot;&gt;test&lt;/a&gt; ###head 定义网页相关元数据，如标题、引用的样式、脚本等 示例：12345&lt;html&gt; &lt;head&gt; &lt;title&gt;文档标题&lt;/title&gt; &lt;/head&gt;&lt;/html&gt; body HTML body 元素表示文档的内容。 示例：&lt;body&gt;内容&lt;/body&gt; footer 定义网页页脚。页脚通常包含：作者、版权、相关链接等信息 示例：&lt;footer&gt;页脚&lt;/footer&gt; br break row 强制换行 示例：&lt;br&gt; hr horizontal rule 水平线，常表示段落级元素之间的主题转换。 示例：&lt;hr&gt; button 按钮 示例：&lt;button name=&quot;button&quot;&gt;Click me&lt;/button&gt; h1~h6 Heading Heading元素呈现了六个不同级别的标题 示例：&lt;h1&gt;一级标题&lt;/h1&gt; p paragraph 表示文本的一个段落 示例: &lt;p&gt;段落&lt;/p&gt; dl description list 一个包含术语描述以及术语定义的列表，通常用于展示词汇表或者键-值对列表 子元素 全称 含义 dt description term 描述术语 dd description definition 术语定义 示例：1234&lt;dl class="dt"&gt; &lt;dt&gt;Mac&lt;/dt&gt; &lt;dd&gt;a computer&lt;/dd&gt;&lt;/dl&gt; ul un-ordered list 无序列表 内部li代表list item 示例：12345&lt;ul&gt; &lt;li&gt;橘子&lt;/li&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;橙子&lt;/li&gt;&lt;/ul&gt; ol ordered list 有序列表 内部li代表list item 示例：12345&lt;ol&gt; &lt;li&gt;第一名&lt;/li&gt; &lt;li&gt;第二名&lt;/li&gt; &lt;li&gt;第三名&lt;/li&gt;&lt;/ol&gt; div HTML Content Division element 没有默认样式 HTML 网页分区元素 通用型的流内容容器 block-level element 示例：123&lt;div&gt; &lt;p&gt;一切由你做主&lt;/p&gt;&lt;/div&gt; span 没有默认样式 短语内容的通用行内容器 inline element1&lt;P&gt;&lt;span&gt;Some text&lt;/span&gt;&lt;/P&gt; img image 代表网页中的图像，如果无法显示图像，使用alt属性定义的内容替换 显示图像：&lt;img src=&quot;mdn-logo-sm.png&quot; alt=&quot;MDN&quot;&gt; 图像链接：&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;mdn-logo-sm.png&quot; alt=&quot;MDN&quot;&gt;&lt;/a&gt; nav navigation bar 导航栏，描绘一个含有多个超链接的区域1234567&lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; link 定义了外部资源和当前文档的关系，最常用于链接样式表示例：&lt;link href=&quot;default.css&quot; rel=&quot;stylesheet&quot; title=&quot;Fancy&quot;&gt; section 章节，一般包含&lt;h1&gt;-&lt;h6&gt; 示例：123456789&lt;section&gt; &lt;h1&gt;Introduction&lt;/h1&gt; &lt;p&gt;...&lt;/p&gt;&lt;/section&gt;&lt;section&gt; &lt;h1&gt;Equipment&lt;/h1&gt; &lt;p&gt;...&lt;/p&gt;&lt;/section&gt; form &amp; input form一个包含交互控件的区域(表单) input 用于接受来自用户的数据,为基于表单创建交互式控件 示例： 123456789101112131415161718192021222324252627282930313233343536&lt;!--示例一--&gt;&lt;form action="" method="get" class="form-example"&gt; &lt;div class="form-example"&gt; &lt;label for="name"&gt;Enter your name: &lt;/label&gt; &lt;input type="text" name="name" id="name" required&gt; &lt;/div&gt; &lt;div class="form-example"&gt; &lt;label for="email"&gt;Enter your email: &lt;/label&gt; &lt;input type="email" name="email" id="email" required&gt; &lt;/div&gt; &lt;div class="form-example"&gt; &lt;input type="submit" value="Subscribe!"&gt; &lt;/div&gt;&lt;/form&gt;&lt;!-- 一个简单的表单，这个表单会发送一个 GET 请求 --&gt;&lt;form action=""&gt; &lt;label for="GET-name"&gt;Name:&lt;/label&gt; &lt;input id="GET-name" type="text" name="name"&gt; &lt;input type="submit" value="Save"&gt;&lt;/form&gt;&lt;!-- 一个简单的表单，发送 POST 请求 --&gt;&lt;form action="" method="post"&gt; &lt;label for="POST-name"&gt;Name:&lt;/label&gt; &lt;input id="POST-name" type="text" name="name"&gt; &lt;input type="submit" value="Save"&gt;&lt;/form&gt;&lt;!-- 使用 fieldset, legend, and label 的表单 --&gt;&lt;form action="" method="post"&gt; &lt;fieldset&gt; &lt;legend&gt;Title&lt;/legend&gt; &lt;input type="radio" name="radio" id="radio"&gt; &lt;label for="radio"&gt;Click me&lt;/label&gt; &lt;/fieldset&gt;&lt;/form&gt; 效果： Enter your name: Enter your email: Name: Name: Title Click me table 二维表格数据 thead tbody tfoot td table data tr table row th table head col colgroup 待补充示例：123456789101112131415161718192021&lt;p&gt;Table with thead, tfoot, and tbody&lt;/p&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Header content 1&lt;/th&gt; &lt;th&gt;Header content 2&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Body data 1&lt;/td&gt; &lt;td&gt;Body data 2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;Footer data 1&lt;/td&gt; &lt;td&gt;Footer data 2&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;&lt;/table&gt; 效果： Header content 1 Header content 2 Body data 1 Body data 2 Footer data 1 Footer data 2 small 副标题，使文字变小一号示例：&lt;small&gt;word.&lt;/small&gt; strong 强调语气，表示十分重要示例：&lt;strong&gt;words&lt;/strong&gt; bold 粗体示例：&lt;b&gt;words&lt;/b&gt; kbd Keyboard Input 键盘输入元素，表示用户数入示例：&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt; video 嵌入视频内容示例：&lt;video src=&quot;videofile.ogg&quot; autoplay poster=&quot;posterimage.jpg&quot;&gt;葫芦娃01&lt;/video&gt; audio 嵌入语音内容示例：&lt;audio src=&quot;audio.ogg&quot; autoplay&gt;葫芦娃02&lt;/audio&gt; svg Scalable Vector Graphics 不规则图形 未完待续 ###iframe 内联框架元素，将另一个HTML页面嵌入到当前页面 示例：12345&lt;iframe src="#" title="iframe example 1" width="400" height="300"&gt;&lt;/iframe&gt; 空元素 empty element 不存在子节点的元素 HTML中的空元素：1234567891011121314151617&lt;area&gt;&lt;base&gt;&lt;br&gt;&lt;col&gt;&lt;colgroup&gt; when the span is present&lt;command&gt;&lt;embed&gt;&lt;hr&gt;&lt;img&gt;&lt;input&gt;&lt;keygen&gt;&lt;link&gt;&lt;meta&gt;&lt;param&gt;&lt;source&gt;&lt;track&gt;&lt;wbr&gt; 可替换标签 可替换标签的展示不是由css控制，外观渲染独立。 HTML典型可替换元素：&lt;img&gt; &lt;object&gt; &lt;video&gt; 表单元素：&lt;textarea&gt; 、&lt;input&gt; 特殊情况下的可替换元素：&lt;audio&gt; 、&lt;canvas&gt; 手机自适应emmet: meta:vp&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0&quot;&gt; 语句解释 页面宽度由设备宽度决定不允许缩放初始缩放比例1:1最大缩放比例1:1最小缩放比例1:1]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http1.1学习]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhttp001%2F</url>
    <content type="text"><![CDATA[HTTP起源HTTP全称HTTP即HyperText Transfer Protocol，超文本传输协议，是应用层协议，万维网的数据通信基础。本文主要介绍HTTP1.1。 HTTP1.1改进 缓存处理 带宽优化及网络连接的使用 错误通知的管理 消息在网络中的发送 互联网地址的维护 安全性及完整性 HTTP2.0最初由google研发，2015年5月作为互联网标准正式发布。 HTTP请求请求四部分 请求行GET /index.html HTTP/1.1 请求头 1234Cache-Control:max-age=0Cookie:gsScrollPos=; _ga=GA1.2.329038035.1465891024; _gat=1If-Modified-Since:Sun, 01 May 2016 11:19:03 GMTUser-Agent:Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36 空行 消息体 请求方法8种 GET读取数据 HEAD与GET一样是发出资源请求，服务器不返回资源的文本部分。 POST提交数据（文件或表单） PUT上传最新内容（多用于修改） DELETE删除资源 TRACE回显服务器收到的请求，用于测试或诊断 OPTIONS返回资源支持的所有HTTP方法 CONNECT将连接改为管道方式的代理服务器，多用于SSL加密服务的连接。 HTTP HeaderHTTP Header详细说明 HTTP Header Content-TypeContent-Type详细说明 常用的Content-Type Type application 123456789101112application/EDI-X12 application/EDIFACT application/javascript application/octet-stream application/ogg application/pdf application/xhtml+xml application/x-shockwave-flash application/json application/ld+json application/xml application/zip Type audio 1234audio/mpeg audio/x-ms-wma audio/vnd.rn-realaudio audio/x-wav Type image 123456789image/gif image/jpeg image/png image/tiff image/vnd.microsoft.icon image/x-icon image/vnd.djvu image/svg+xml Type multipart 1234multipart/mixed multipart/alternative multipart/related (using by MHTML (HTML mail).) Type text 123456text/css text/csv text/html text/javascript (已废弃) text/plain text/xml Type video 1234567video/mpeg video/mp4 video/quicktime video/x-ms-wmv video/x-msvideo video/x-flv video/webm HTTP响应响应四部分 状态行HTTP/1.1 200 OK 响应头 123456Connection:keep-aliveContent-Encoding:gzipContent-Type:text/html; charset=utf-8Date:Fri, 24 Jun 2016 06:23:31 GMTServer:nginx/1.9.12Transfer-Encoding:chunked 空行 消息体 响应状态码详细说明 常用status_code: 1xx消息–请求已经被服务器接受，继续处理不常用，略 2xx成功–请求已成功被服务器接收、理解、并接受常用响应如下： 201 Created：创建成功，返回URI 202 Accepted：服务器已接受请求，多用于异步。 204 No Content: 服务器成功处理了请求，不返回任何内容。 3xx重定向–需要后续操作才能完成这一请求常用响应如下： 301 Moved Permanently：资源已永久移动，在Location中返回新的若干个URI。 302 Found：临时重定向 303 See Other：为了替代302，实现POST后的GET重定向。 304 Not Modified: 资源未改变，使用缓存。 4xx请求错误–请求含有词法错误或者无法被执行常用响应如下： 400 Bad Request：客户端明显错误 401 Unauthorized：未认证 403 Forbidden：拒绝执行 404 Not Found：找不到资源 405 Method Not Allowed 408 Request Timeout 409 Conflict 423 Locked 429 Too Many Requests 5xx服务器错误–服务器在处理某个正确请求时发生错误常用响应如下： 500 Internal Server Error: 502 Bad Gateway: 503 Service Unavailable 504 Gateway Timeout HTTP—ETag详细说明 ETag提供一种缓存验证机制，如果资源改变，hash之后的ETag值就会变化。ETag： &quot;686897696a7c876b7e&quot; CURL命令学习定义Transfers data from or to a server.支持大多数协议，包括HTTP，FTP and POP3 ，这里主要介绍HTTP相关的。 全称Command Line URL Viewer，是一个Linux命令行工具。 用法简介 下载URL内容到文件[output]：curl http://www.baidu.com -o filename 将url输出保存在对应的文件名下[remote-name]：curl -O http://www.baidu.com/filename 跟随重定向[Location]，自动续传[Continue]，保存到对应的文件名下：curl -O -L -C http://www.baidu.com/filename 模拟post请求[data]:curl -d ‘name=bob’ http://www.baidu.com/form 指定method(默认GET）和[header]:curl -H ‘X-My-Header: 123’ -X PUT http://www.baidu.com 发送Json数据，指定content-type：curl -d ‘{“name”: “bob”}’ -H ‘Content-Type: application/json’ http://www.baidu.com/users/1234 使用用户认证[user authentication]：curl -u username:password http://www.baidu.com 传递客户端证书[certificate]和资源密钥[key]，跳过证书验证：curl –cert client.pem –key key.pem –insecure https://www.baidu.com silence &amp; verbosecurl -s -v – http://www.baidu.com]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Ftest%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122inline-block不用关注html标签没有块级元素和内联元素的区别的，css才有html不应该管样式，只管内容html定义结构和内容css管样式js管动作alt 可选内容alternativea 标签全称 anchor 连接 锚banner 底层大图form 必须有提交按钮form button自动升级为提交按钮， 如果type=button不会，普通按钮，反而没有用？submit 可以提交checkbox 勾选框label标记input老司机写法：label包含inputinput要有name，不然实际没有起作用checkbox 多选radio 单选select 下拉列表，多选，单选textarea 多行输入colgroup col现在都用class了设定表格样式，collapse 12子元素float left 浮动 父元素必须添加clearfixinherit 继承 1234520190203所有非空标签都有伪类比如 ::before ::after有点像python里面的with或者tearup，teardown。不过用法不太一样？css shadow generator]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo教程001]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fhexo001%2F</url>
    <content type="text"><![CDATA[123456hexo new $namehexo generatehexo deployhexo generate &amp;&amp; deployhexo s -ghexo clean 1234567hexo new page categoriestype: &quot;categories&quot;categories: hexohexo new page tagstype: &quot;tags&quot;tags: [hexo] 12themegit clone git@github.com:iissnan/hexo-theme-next.git]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fgit001%2F</url>
    <content type="text"><![CDATA[本文主要介绍git init git add git commit的使用方法git init1234567Initializes a new local Git repository. - Initialize a new local repository: git init - Initialize a barebones repository, suitable for use as a remote over ssh: git init --bare git add12345678910111213141516Adds changed files to the index.- Add a file to the index: git add path/to/file- Add all files (tracked and untracked): git add -A- Only add already tracked files: git add -u- Also add ignored files: git add -f- Add parts of a file interactively: git add -p path/to/file git commit1234567891011121314Commit files to the repository.- Commit staged files to the repository with a message: git commit -m message- Auto stage all modified files and commit with a message: git commit -a -m message- Replace the last commit with currently staged changes: git commit --ame - Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template： -v : --verbose git commit -v git merge钻石合并git merge bugFix git rebase线性合并-i 交互式 interactivegit rebase -i HEAD~4 从前四次选择git rebase -i master 从当前分支选择然后和master合并git rebase bugFix master 把bugFix分支的内容合并到master分支上 git describe描述离你最近的taggit describe mastergit describe c1v1_2_gc5显示距离2个提交有一个tag名称是v1，提交记录是c5 git branch本地创建分支推送到远端git push origin $remote_branch:$local_branch拉取远端分支git pull origin $remote_branch:$local_branch查看所有分支git branch -vva切换分支git checkout $branch_namegit checkout -b $branch_name 创建并切换git checkout –force $branch_name 强制切换，丢弃修改删除分支git branch -d $branch_name删除远程分支git push origin:$branch_namegit push origin –delete $branch_name把分支强制指定到提交c3git branch -f master c3 git cherry-pickgit cherry-pick c3 c5 c7把某一个分支的提交抓取到当前分支的HEAD上1.如果 a,b 两个提交修改一个文件，pick 后一个，需要手动修改冲突。2.如果 a,b 两个提交修改不同文件，pick 后一个，只会合入后一个的代码。 相对引用^ 向上移动一个提交记录^2 多个父节点时，选择第二个父节点~ 向上移动多个提交记录 git checkout切换分支 分离HEADgit checkout $branchgit checkout c1 git stash备份更改，暂存到git中，回到干净的工作目录。git stash 备份当前git stash listgit stash popgit stash cleargit stash apply 取出某一个stash git 放弃本地修改 强制更新git fetch –allgit reset –hard origin/master git tag对分支打 taggit tag -am “origin az-nsp with keystone &amp;&amp; rabbitmq” az-nsp-pvt-1.0对提交打 taggit tag -a nspv3.0.1.0 ee4cgit push origin az-nsp-pvt-1.0基于 tag 创建分支git checkout -b $branchname nspv3.0.1.0git tag -d nspv3.0.1.0git push –force origin:refs/tags/nspv3.0.1.0]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F24%2Flinux001%2F</url>
    <content type="text"><![CDATA[介绍ls cat mv touch 的基本用法ls12345678910111213141516171819List directory contents. - List files one per line: ls -1 - List all files, including hidden files: ls -a - Long format list (permissions, ownership, size and modification date) of all files: ls -la - Long format list with size displayed using human readable units (KB, MB, GB): ls -lh - Long format list sorted by size (descending): ls -lS - Long format list of all files, sorted by modification date (oldest first): ls -ltr cat12345678910111213Print and concatenate files.- Print the contents of a file to the standard output: cat file- Concatenate several files into the target file: cat file1 file2 &gt; target_file- Append several files into the target file: cat file1 file2 &gt;&gt; target_file- Number all output lines: cat -n file mv12345678910111213141516Move or rename files and directories.- Move files in arbitrary locations: mv source target- Do not prompt for confirmation before overwriting existing files: mv -f source target- Prompt for confirmation before overwriting existing files, regardless of file permissions: mv -i source target- Do not overwrite existing files at the target: mv -n source target- Move files in verbose mode, showing files after they are moved: mv -v source target touch12345678910Change a file access and modification times (atime, mtime).- Create a new empty file(s) or change the times for existing file(s) to current time: touch filename- Set the times on a file to a specific date and time: touch -t YYYYMMDDHHMM.SS filename- Use the times from a file to set the times on a second file: touch -r filename filename2]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
