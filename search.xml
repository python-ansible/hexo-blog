<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[markdown说明]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[本文转载自 younghz的markdown库 部分内容稍作修改 主要内容 Markdown是什么？谁创造了它？为什么要使用它？怎么使用？谁在用？尝试一下 正文Markdown是什么？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 谁创造了它？它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于2013年1月11日自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 他有着足以让你跪拜的人生经历： 14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。 为什么要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail, MarkdownOutlook) 摆脱Word（我不是认真的）。 怎么使用？如果不算扩展，Markdown的语法绝对简单到让你爱不释手。 Markdown语法主要分为如下几大部分：标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’。 标题两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 2）使用#，可表示1-6级标题。 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如： > 区块引用>&gt; 嵌套引用 效果： 区块引用 嵌套引用 代码和语法高亮代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main(){ printf(“Hello, Markdown.”);} 代码区块： void main() { printf(&quot;Hello, Markdown.&quot;); } 注意:需要和普通段落之间存在空行。 行内代码本文是一篇介绍`Markdown`的文章 效果：本文是一篇介绍Markdown的文章 语法高亮 ```html Syntax Highlighting``` 效果：1&lt;div&gt;Syntax Highlighting&lt;/div&gt; ```python s = “Python syntax highlighting” print s``` 效果：12s = "Python syntax highlighting"print s 强调在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，_斜体_粗体，粗体 列表使用·、+、或-标记无序列表，如： -（+*） 第一项-（+*） 第二项- （+*）第三项 注意：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线分割线最常使用就是三个或以上*，还可以使用-和_。 链接链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https:://github.com/younghz/Markdown “Markdown”)。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https:://github.com/younghz/Markdown “Markdown”[2]:https:://github.com/younghz/Markdown “Markdown” 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;不出现在区块中。 图片添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 行内式： ![替代文字](http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字”) 效果： 参考式： ![替代文字][logo][logo]:http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字” 效果：![替代文字][logo][logo]:markdown/logo.png “标题文字” 注意：Markdown还支持传统html写法，比如&lt;a href=”https://www.w3cschool.cn/&quot;\&gt;W3Cschool&lt;/a> 反斜杠\相当于反转义作用。使符号成为普通符号。 符号’`’起到标记作用。如： `ctrl+a` 效果： ctrl+a 表格：列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 谁在用？Markdown的使用者： GitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 尝试一下 Chrome下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。 在线的dillinger.io评价也不错 Windowns下的MarkdownPad也用过，不过免费版的体验不是很好。 Mac下的Mou是国人贡献的，口碑很好。 Linux下的ReText不错。 当然，最终境界永远都是笔下是语法，心中格式化 :)。 注意：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber](http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。 以上基本是所有traditonal markdown的语法。 关于其它扩展语法可参见具体工具的使用说明。]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html001]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhtml001%2F</url>
    <content type="text"><![CDATA[html语言学习01##起源 w3c ##MDN 学习 ##HTML 常用标签 ##空标签 ##可替换标签]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http1.1学习]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhttp001%2F</url>
    <content type="text"><![CDATA[HTTP学习01HTTP起源HTTP全称HTTP即HyperText Transfer Protocol，是应用层协议，万维网的数据通信基础。本文主要介绍HTTP1.1。 HTTP1.1改进： 缓存处理 带宽优化及网络连接的使用 错误通知的管理 消息在网络中的发送 互联网地址的维护 安全性及完整性 HTTP2.0:最初由google研发，2015年5月作为互联网标准正式发布。 HTTP请求请求方法8种 GET读取数据 HEAD与GET一样是发出资源请求，服务器不返回资源的文本部分。 POST提交数据（文件或表单） PUT上传最新内容（多用于修改） DELETE删除资源 TRACE回显服务器收到的请求，用于测试或诊断 OPTIONS返回资源支持的所有HTTP方法 CONNECT将连接改为管道方式的代理服务器，多用于SSL加密服务的连接。 HTTP响应 1xx消息–请求已经被服务器接受，继续处理不常用，略 2xx成功–请求已成功被服务器接收、理解、并接受常用响应如下： 201 Created：创建成功，返回URI 202 Accepted：服务器已接受请求，多用于异步。 204 No Content: 服务器成功处理了请求，不返回任何内容。 3xx重定向–需要后续操作才能完成这一请求常用响应如下： 301 Moved Permanently：资源已永久移动，在Location中返回新的若干个URI。 302 Found：临时重定向 303 See Other：为了替代302，实现POST后的GET重定向。 304 Not Modified: 资源未改变，使用缓存。 4xx请求错误–请求含有词法错误或者无法被执行常用响应如下： 400 Bad Request：客户端明显错误 401 Unauthorized：未认证 403 Forbidden：拒绝执行 404 Not Found：找不到资源 405 Method Not Allowed 408 Request Timeout 409 Conflict 423 Locked 429 Too Many Requests 5xx服务器错误–服务器在处理某个正确请求时发生错误常用响应如下： 500 Internal Server Error: 502 Bad Gateway: 503 Service Unavailable 504 Gateway Timeout CURL命令学习定义Transfers data from or to a server.支持大多数协议，包括HTTP，FTP and POP3 ，这里主要介绍HTTP相关的。 全称Command Line URL Viewer，是一个Linux命令行工具。 ####用法简介 下载URL内容到文件[output]：curl http://www.baidu.com -o filename 将url输出保存在对应的文件名下[remote-name]：curl -O http://www.baidu.com/filename 跟随重定向[Location]，自动续传[Continue]，保存到对应的文件名下：curl -O -L -C http://www.baidu.com/filename 模拟post请求[data]:curl -d ‘name=bob’ http://www.baidu.com/form 指定method(默认GET）和[header]:curl -H ‘X-My-Header: 123’ -X PUT http://www.baidu.com 发送Json数据，指定content-type：curl -d ‘{“name”: “bob”}’ -H ‘Content-Type: application/json’ http://www.baidu.com/users/1234 使用用户认证[user authentication]：curl -u username:password http://www.baidu.com 传递客户端证书[certificate]和资源密钥[key]，跳过证书验证：curl –cert client.pem –key key.pem –insecure https://www.baidu.com]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Ftest%2F</url>
    <content type="text"><![CDATA[test123456789101112131415161718192021222324252627282930313233343520190127inline-block不用关注html标签没有块级元素和内联元素的区别的，css才有html不应该管样式，只管内容html定义结构和内容css管样式js管什么？导航条 navigation baralt 可选内容alternativea 标签全称 anchor 连接 锚hr 水平分割线 horizon rulebanner 底层大图描述列表 description list dl其中有dt description term 描述词dd description definition 描述定义br 强制换行 break rowtr table rowp paragraph 段落form 必须有提交按钮form button自动升级为提交按钮， 如果type=button不会，普通按钮，反而没有用？submit 可以提交checkbox 勾选框label标记input老司机写法：label包含inputinput要有name，不然实际没有起作用checkbox 多选radio 单选select 下拉列表，多选，单选textarea 多行输入table 只有三个thead tr td(data) thtbody tr td thtfoot tr td thcolgroup col现在都用class了设定表格样式，collapse]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo教程001]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fhexo001%2F</url>
    <content type="text"><![CDATA[123hexo new $namehexo generatehexo deploy 1234567hexo new page categoriestype: &quot;categories&quot;categories: hexohexo new page tagstype: &quot;tags&quot;tags: [hexo] 12themegit clone git@github.com:iissnan/hexo-theme-next.git]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fgit001%2F</url>
    <content type="text"><![CDATA[本文主要介绍git init git add git commit的使用方法git init1234567Initializes a new local Git repository. - Initialize a new local repository: git init - Initialize a barebones repository, suitable for use as a remote over ssh: git init --bare git add12345678910111213141516Adds changed files to the index.- Add a file to the index: git add path/to/file- Add all files (tracked and untracked): git add -A- Only add already tracked files: git add -u- Also add ignored files: git add -f- Add parts of a file interactively: git add -p path/to/file git commit1234567891011121314Commit files to the repository.- Commit staged files to the repository with a message: git commit -m message- Auto stage all modified files and commit with a message: git commit -a -m message- Replace the last commit with currently staged changes: git commit --ame - Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template： -v : --verbose git commit -v]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F24%2Flinux001%2F</url>
    <content type="text"><![CDATA[介绍ls cat mv touch 的基本用法ls12345678910111213141516171819List directory contents. - List files one per line: ls -1 - List all files, including hidden files: ls -a - Long format list (permissions, ownership, size and modification date) of all files: ls -la - Long format list with size displayed using human readable units (KB, MB, GB): ls -lh - Long format list sorted by size (descending): ls -lS - Long format list of all files, sorted by modification date (oldest first): ls -ltr cat12345678910111213Print and concatenate files.- Print the contents of a file to the standard output: cat file- Concatenate several files into the target file: cat file1 file2 &gt; target_file- Append several files into the target file: cat file1 file2 &gt;&gt; target_file- Number all output lines: cat -n file mv12345678910111213141516Move or rename files and directories.- Move files in arbitrary locations: mv source target- Do not prompt for confirmation before overwriting existing files: mv -f source target- Prompt for confirmation before overwriting existing files, regardless of file permissions: mv -i source target- Do not overwrite existing files at the target: mv -n source target- Move files in verbose mode, showing files after they are moved: mv -v source target touch12345678910Change a file access and modification times (atime, mtime).- Create a new empty file(s) or change the times for existing file(s) to current time: touch filename- Set the times on a file to a specific date and time: touch -t YYYYMMDDHHMM.SS filename- Use the times from a file to set the times on a second file: touch -r filename filename2]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
