<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[初识css003]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F23%2Fcss003%2F</url>
    <content type="text"><![CDATA[body 默认margin 8px使用link引用]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识javascript02]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F23%2F%E5%88%9D%E8%AF%86javascript02%2F</url>
    <content type="text"><![CDATA[// 键盘事件onkeypress// 鼠标点击onclick// 错误onerror// 按住鼠标onmousedown// 移动鼠标onmousemove// 松开鼠标onmouseup// touch 事件ontouchstartontouchmoveontouchend search js detect touch支持 touch null 不支持 touch undefineddocument.body.ontouchstart !== undefined‘ontouchstart’ in document.body getElementByIdcreateElementappendChild 鼠标的坐标clientXclientY触控的坐标 // 注意有多点触控touches[0].clientXtouches[0].clientY小 tips：(x-3) (y-3)canvas 不需要 canvas 默认样式inline-block不能通过 css width height指定画布大小解决方案：获取初始viewport宽高var pageWidth = document.documentElement.clientWidthvar pageHeight = document.documentElement.clientHeightcanvas.width = pageWidthcanvas.height = pageHeight动态调整window.onresize时再次获取 初始化var ctx = canvas.getContext(‘2d’) 矩形ctx.fillStyle = ‘red’;ctx.fillRect(10,10,100,100); //rectangle 矩形分别代表x,y,长,宽 ctx.strokeStyle = ‘yellow’;ctx.strokeRect(10,10,100,100); //stroke 描边 ctx.clearRect(50,50,10,10); //橡皮擦 三角形ctx.fillStyle = ‘red’;ctx.beginPath();ctx.moveTo(240,240);ctx.lineTo(300,240);ctx.lineTo(300,300);ctx.fill(); 圆弧ctx.beginPath();ctx.arc(150,150,20,0,Math.PI2); // x,y,半径,开始弧度,结束弧度弧度=(Math.PI/180)角度。ctx.fill(); //填充ctx.stroke(); //描边 canvas 画图时坐标是相对于viewport的而不是body1.可以去掉body的margin 解决填充频率的方法：使用canvas在两点间画线 画线ctx.beginPath()ctx.moveTo(0,0)ctx.lineTo(100,0)ctx.stroke() //需要closePath闭合ctx.fill() //会自动闭合ctx.closePath() ctx.lineWidth = 10; //线宽 点击开关eraserEnabled = !eraserEnabled 关于画笔 橡皮檫使用两个按钮表示如果将if else 表示为平铺直叙，会减少代码bug 禁用滚动preventDefault()]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识javascript01]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F21%2F%E5%88%9D%E8%AF%86javascript01%2F</url>
    <content type="text"><![CDATA[javascript 不一定要以;结尾 var a = 1;等价于var a;a = 1; 变量提升console.log(a);var a = 1;在实际代码执行中会变成：var a;console.log(a);a = 1;最后的结果是显示 undefined 变量命名规则第一个字符，可以是任意 unicode 字符 (包括英文字母和其他语言的字母） ，以及美元符号 ($) 和下划线 (_)第二个字符，除了 Unicode 字母、美元符号和下划线，还可以使用数字0-9。 if (m === 0) { // …} else if (m === 1) { // …} else if (m === 2) { // …} else { // …} var x = 1; switch (x) { case 1: console.log(‘x 等于1’); break; case 2: console.log(‘x 等于2’); break; default: console.log(‘x 等于其他值’);} 三元运算符（条件）? 表达式1 : 表达式2var even = (n % 2 === 0) ? true : false; var i = 0;while(i &lt; 100) { console.log(i) i += 1;} var x = 3;for (var i = 0; i &lt; x; i++) { console.log(i)} var x = 3;var i = 0;do { console.log(i); i++;} while (i &lt; x); label + break | continue top: for (var i = 0; i &lt; 3; i++){ for (var j = 0; j &lt; 3; j++){ if (i === 1 &amp;&amp; j === 1) break top; console.log(‘i=’ + i + ‘, j=’ + j); } }// i=0, j=0// i=0, j=1// i=0, j=2// i=1, j=0 top: for (var i = 0; i &lt; 3; i++){ for (var j = 0; j &lt; 3; j++){ if (i === 1 &amp;&amp; j === 1) continue top; console.log(‘i=’ + i + ‘, j=’ + j); } }// i=0, j=0// i=0, j=1// i=0, j=2// i=1, j=0// i=2, j=0// i=2, j=1// i=2, j=2 NaN 特殊值，表示非数字NaN 是数字类型，表示执行数学运算失败的结果NaN === NaN //false]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识git-hook01]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F14%2F%E5%88%9D%E8%AF%86git-hook01%2F</url>
    <content type="text"><![CDATA[git hook 简介git hook可以在特定操作之前或者之后执行自定义的脚本 待研究在提交代码后，自动部署静态页面主要使用post-receive实现 客户端钩子commit-msgpre-commit 提交之前post-commit 提交之后 服务器钩子pre-receive 接受之前update 更新之前post-update 更新之后post-receive 接受之后]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初识python打包01]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F14%2F%E5%88%9D%E8%AF%86python%E6%89%93%E5%8C%8501%2F</url>
    <content type="text"><![CDATA[rpm包python setup.py bdist_rpm wheel包pip install wheelpython setup.py bdist_wheel]]></content>
  </entry>
  <entry>
    <title><![CDATA[algorithm001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F12%2Falgorithm001%2F</url>
    <content type="text"><![CDATA[伪代码可以自己定义语法，不用纠结细节 流程图开始结束圆角正常步骤方形分支语句菱形 算法输入输出明确性有限性有效性 解决问题分析问题，想出数据结构想出对应的算法 算法分类分治法动态规划法贪婪算法线性规划法简并法]]></content>
  </entry>
  <entry>
    <title><![CDATA[css002]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F05%2Fcss002%2F</url>
    <content type="text"><![CDATA[如何使用CSS做出：1.左右布局123456789101112131415161718&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;div class="left-half"&gt; 左边 &lt;/div&gt; &lt;div class="right-half"&gt; 右边 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 使用背景渐变123456789.container &#123; background-image: linear-gradient( to right, #f7941d 0%, #f7941d 50%, #8d5022 50%, #8d5022 100%);&#125; 使用绝对定位123456789101112131415161718.container &#123; width: 100%; position: relative;&#125;.left-half &#123; background-color: #f7941d; position: absolute; left: 0px; width: 50%;&#125;.right-half &#123; background-color: #8d5022; position: absolute; right: 0px; width: 50%;&#125; 使用假表12345678910111213141516.container &#123; display: table;&#125;.left-half,.right-half &#123; display:table-cell;&#125;.left-half &#123; background: #f7941d;&#125;.right-half &#123; background: #8d5022;&#125; 使用float1234567891011121314151617.left-half,.right-half &#123; float: left;&#125;.left-half &#123; background: #f7941d; width: 50%;&#125;.right-half &#123; background: #8d5022; width: 50%;&#125;注意，父元素需要class=clearfix,因为float会使div脱离文档流，需要clearfix把后面正常参与文档流的内容后挪，不然会造成div中的内容与后面的内容视觉上重合。 使用inline-block123456789.left-half &#123; background: #f7941d; display: inline-block;&#125;.right-half &#123; background: #8d5022; display: inline-block;&#125; 使用flexbox12345678910111213141516171819.container &#123; display: flex; height: 100px;&#125;.left-half,.right-half &#123; height: 100%;&#125;.left-half &#123; background: #f7941d; flex: 1;&#125;.right-half &#123; background: #8d5022; flex: 1;&#125; 使用grid12345678910111213.container &#123; display: grid;&#125;.left-half &#123; background: #f7941d; grid-column: 1;&#125;.right-half &#123; background: #8d5022; grid-column: 2;&#125; 左中右布局123456789101112131415161718192021&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta name="viewport" content="width=device-width"&gt; &lt;title&gt;JS Bin&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="container"&gt; &lt;div class="left"&gt; 左边 &lt;/div&gt; &lt;div class="center"&gt; 中间 &lt;/div&gt; &lt;div class="right"&gt; 右边 &lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 1.float123456789101112131415161718.left ,.center,.right &#123; float: left; width: 30%&#125;.left &#123; background: red;&#125;.center &#123; background: #f7941d;&#125;.right &#123; background: #8d5022;&#125; 2.float + inline-block1234567891011121314151617181920212223container &#123; width:100%; text-align:center;&#125;.left &#123; float:left; width:200px; background: red;&#125;.center &#123; display: inline-block; margin:0 auto; width:200px; background: yellow;&#125;.right &#123; float:right; width:200px; background: blue;&#125; 3.flexbox css3123456789101112131415.container &#123; display: flex; flex-direction: row; flex-wrap: nowrap; justify-content: space-between; background-color: lightyellow;&#125;.left ,.center ,.right &#123; width: 100px; height: 100px; border: 2px dashed red;&#125; 水平居中内联元素：text-align: center;块级元素：margin: 0 auto; 垂直居中1.不知道高度，绝对定位123456789.parent &#123; position:relative; &#125;.child &#123; position: absolute; top: 50%; transform: translateY(-50%); &#125; 2.父元素高度已知，相对定位123456789.parent &#123; height:xxx; &#125; .child &#123; position: relative; top: 50%; transform: translateY(-50%); &#125; 3.flex12345.parent &#123; display:flex;/*Flex布局*/ display: -webkit-flex; /* Safari */ align-items:center;/*指定垂直居中*/&#125; 等其他小技巧]]></content>
  </entry>
  <entry>
    <title><![CDATA[macos]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F04%2Fmacos%2F</url>
    <content type="text"><![CDATA[1Clipboard剪贴板工具opt + com + v zsh zsh-autosuggesionsautojumpzsh-syntax-highlightingdotenv vimyd有道词典翻译工具 xScope设计师工具 axure产品原型设计工具 window tidy窗口分屏 colorsnapper2取色工具 IDEpycharmwebstorm translationideavim替换 command + r正则([a-z]) -&gt; ‘$1’, brewnpmpostmannavicatcompareipythontmux系统快捷键command + 空格 聚焦搜索font mac 字体查看 iTerm2command + D 垂直分屏shift + command + D 水平分屏command + w 关闭command + u 透明背景 Balsamiq Mockups3 原型图绘制软件SketchBook Pro 画图软件KeyCastr 显示按键]]></content>
  </entry>
  <entry>
    <title><![CDATA[chrome001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F02%2Fchrome001%2F</url>
    <content type="text"><![CDATA[开发者工具的使用 打开MacOption + Command + JOption + Command + IWin/LinuxCtrl + Shift + JCtrl + Shift + IF12 刷新Command + R Console 面板Shift + Enter 换行 Preserve log保留日志：1.可以保留跳转的日志 搜索 tips排除某个关键字阻止手机 980 -索爱]]></content>
      <categories>
        <category>tools</category>
      </categories>
      <tags>
        <tag>chrome</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bash002]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F01%2Fbash002%2F</url>
    <content type="text"><![CDATA[du从小到大显示所有的文件(包含隐藏文件)du -ahd1|sort -h]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css001]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F01%2Fcss001%2F</url>
    <content type="text"><![CDATA[CSS 学习加载css方式1234内联 style 属性style 标签&lt;link rel="stylesheet" href="./a.css"&gt;@import url(./a.css); clearfix12345.clearfix::after&#123; content: ''; display: block; clear: both;&#125; 横向布局方式 父模块 clearfix 子模块 float: left; display: inline-block;有bug 背景背景图片background-image:url(./1.JPG); 背景颜色background: #F7F8FA; 16进制 字体 font-family: “Arial Black”; font-size: 13px; font-weight: normal; bold; 加粗 font-style: normal; italic;斜体 oblique;倾斜体 color: rgba(255, 255, 255, 0.7); 下划线 text-decoration: none; 取消下划线 内边距 padding12345678910111213141516padding-top: 1px;padding-right: 1px;padding-bottom: 1px;padding-left: 1px;padding: 0; #四个边#垂直方向| 水平方向padding: 5px 0; 垂直方向 水平方向#顶部| 水平方向| 底部padding: 1px 2px 3px;#上右下左，顺时针方向padding: 1px 1px 1px 1px; padding: inherit; 外边距 margin123456789margin-top:margin-right:margin-bottom:margin-left:margin: top right bottom leftmargin: 0;margin 取值支持：auto &lt;percentage&gt; &lt;length&gt;length 包含两种：em 字距 px 像素 列表样式list-style1234list-style: none; 无样式circle; 圆点标记square inside; 方点标记 ###border 边框 支持三种属性： width 宽度 style 样式 color 颜色 支持四个方向 border-bottom border-bottom: 3px solid transparent; 3像素坚实透明 border-bottom-color: #DC6465; border 调试大法border: 1px solid red; text-align 行内对齐 text-align: left; center; justify-all; CSS层级关系1234有&gt; 代表固定的层级关系.TopNavBar &gt; nav &gt; ul &gt; li &gt; a无&gt;代表不固定的层级关系，可能存在多级跳跃。.TopNavBar nav &gt; ul &gt; li &gt; a 三角形变换100px solid transparent;1234567width: 10px;height: 10px;border-top-color: black;border-right-color: blue;border-bottom-color: green;border-left-color: red;border-top-width: 0px; box-sizing content-box 是默认值当设置元素的宽和高时，只会应用到内容区。如果元素有padding和border实际宽度 = width + padding + border border-boxwidth = 内容 + padding + border一些专家甚至建议将所有元素的box-sizing 都设置为border-box display inline都在一行里面设置width、height无效margin、padding 垂直方向无效水平方向有效 block每个独占一行width、height、margin、padding都可以设置 inline-block既呈现为inline，又呈现为block内联对象会排列在同一行但是也可以设置高、宽 渐变12345background: linear-gradient(to bottom, #ffffff 0%, #ffffff 50%, #000000 50%, #000000 100%); webpage free psdpsd 是ps使用的文档格式]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jetbrains]]></title>
    <url>%2Fhexo-blog%2F2019%2F02%2F01%2Fjetbrains%2F</url>
    <content type="text"><![CDATA[surround with mac:command + shift + T win:ctrl + alt + T ##格式化代码 mac: command + option + L win: ctrl + alt + L]]></content>
      <categories>
        <category>jetbrains</category>
      </categories>
      <tags>
        <tag>jetbrains</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[bash001]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F31%2Fbash001%2F</url>
    <content type="text"><![CDATA[转载自：LinuxTOY 编辑命令 Ctrl + a ：移到命令行首 Ctrl + e ：移到命令行尾 Ctrl + f ：按字符前移（右向） Ctrl + b ：按字符后移（左向） Alt + f ：按单词前移（右向） Alt + b ：按单词后移（左向） Ctrl + xx：在命令行首和光标之间移动 Ctrl + u ：从光标处删除至命令行首 Ctrl + k ：从光标处删除至命令行尾 Ctrl + w ：从光标处删除至字首 Alt + d ：从光标处删除至字尾 Ctrl + d ：删除光标处的字符 Ctrl + h ：删除光标前的字符 Ctrl + y ：粘贴至光标后 Alt + c ：从光标处更改为首字母大写的单词 Alt + u ：从光标处更改为全部大写的单词 Alt + l ：从光标处更改为全部小写的单词 Ctrl + t ：交换光标处和之前的字符 Alt + t ：交换光标处和之前的单词 Alt + Backspace：与 Ctrl + w 相同类似，分隔符有些差别 [感谢 rezilla 指正] 重新执行命令 Ctrl + r：逆向搜索命令历史 Ctrl + g：从历史搜索模式退出 Ctrl + p：历史中的上一条命令 Ctrl + n：历史中的下一条命令 Alt + .：使用上一条命令的最后一个参数 控制命令 Ctrl + l：清屏 Ctrl + o：执行当前命令，并选择上一条命令 Ctrl + s：阻止屏幕输出 Ctrl + q：允许屏幕输出 Ctrl + c：终止命令 Ctrl + z：挂起命令 Bang (!) 命令 !!：执行上一条命令 !blah：执行最近的以 blah 开头的命令，如 !ls !blah:p：仅打印输出，而不执行 !$：上一条命令的最后一个参数，与 Alt + . 相同 !$:p：打印输出 !$ 的内容 !*：上一条命令的所有参数 !:p：打印输出 ! 的内容 ^blah：删除上一条命令中的 blah ^blah^foo：将上一条命令中的 blah 替换为 foo ^blah^foo^：将上一条命令中所有的 blah 都替换为 foo 友情提示：以上介绍的大多数 Bash 快捷键仅当在 emacs 编辑模式时有效，若你将 Bash 配置为 vi 编辑模式，那将遵循 vi 的按键绑定。Bash 默认为 emacs 编辑模式。如果你的 Bash 不在 emacs 编辑模式，可通过 set -o emacs 设置。 ^S、^Q、^C、^Z 是由终端设备处理的，可用 stty 命令设置。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>bash</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim学习]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F31%2Fvim001%2F</url>
    <content type="text"><![CDATA[vim教程vimtutoroperator [number] motionvim支持重复操作，只要在motion前加入[number] 移动12345678光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。h (左移)j (下行) k (上行) l (右移)行首：0行尾：$ 进入1vim $file 退出12:q! 放弃所有改动。:wq 保存改动。 插入123456o 在光标下方插入一行。O 在光标上方插入一行。i 在光标前插入文本a 在光标后插入文本。A 在光标所在的行末之后插入文本。 operator [number] motion123456789在正常模式下修改命令的格式是：operator [number] motion其中：operator - 操作符，代表要做的事情，比如 d 代表删除[number] - 可以附加的数字，代表动作重复的次数motion - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)，e 使光标移动到单词末尾。 2w #向前移动两个单词3e #向前移动三个单词的末尾0 #移动到行首 撤销123撤消以前的操作：u撤消在一行中所做的改动：U撤消以前的撤消命令，恢复以前的操作结果：CTRL-R 删除、复制、粘贴1234567891011121314在正常模式下删除光标所在位置的字符：x从当前光标删除至下一个单词：dw从当前光标删除至当前行末尾：d$删除整行：dd删除到当前单词末尾：de 2dd #ndd删除多行d4w&amp;d3w #删除大写字母单词 this line FGHI JK LMN OP of words is Q RS TUV cleaned up.—》this line of words is cleaned up.yy-p #即复制粘贴删除后的内容，会放在vim寄存器中，使用p可以粘贴。内容置于光标之后，如果删除的是整行，将置于当前光标所在行的下一行。 替换12345678910111213r 替换光标所在位置 R 进入替换模式，按 &lt;ESC&gt; 键回到正常模式。ce 可以替换当前光标到单词末尾的内容；c$ 可以替换当前光标到行末的内容。cwc [number] e|w #多个单词的替换行内替换第一个字符串:s/old/new行内替换所有字符串:s/old/new/g在两行内替换所有字符串:#,#s/old/new/g文件内替换所有字符串:%s/old/new/g全文替换时确认每个替换:%s/old/new/gc 跳转123456789CTRL-G 显示光标所在位置和文件信息。G 将光标跳转至文件最后一行。gg 将光标跳转至文件第一行。[number]G #跳转任意行ctrl+f 向下翻页ctrl+b 向上翻页ctrl+d 向下半页ctrl+u 向上半页 查找12345678/ $str 正向查找字符串。? $str 反向查找字符串。n 键重复上一次的命令N 向相反方向查找CTRL-O 跳转回旧的位置，CTRL-I 带您到较新的位置。如果光标当前位置是括号(、)、[、]、&#123;、&#125;，按 % 会将光标移动到配对的括号上。 编码常用12345678910111213141516171819zo 打开代码折叠zc 关闭代码折叠注：可以是任意的成对符号，比如&apos; &quot; ( [ &#123; &lt;ci$ 更改符号内的文本di$ 删除符号内的文本yi$ 复制符号内的文本vi$ 选中符号内的文本i-&gt;a 即包括符号一起复制系统剪贴板内容到vimreg 查看寄存器按照提示操作，最后需要加上p复制vim到系统剪贴板&quot;+yy 复制当前行&quot;+ny 复制n行默认使用系统剪切板set clipboard=unnamed 外部命令1234567891011121314:!command 用于执行一个外部命令 command。请看一些实际例子：(MS-DOS) (Unix):!dir :!ls - 用于显示当前目录的内容。:!del FILENAME :!rm FILENAME - 用于删除名为 FILENAME 的文件。:w FILENAME 将当前 VIM 中编辑的文件保存到FILENAME中。v motion :w FILENAME 将编辑文件中可视模式下选中的内容保存到FILENAME 中。:r FILENAME 读取磁盘文件 FILENAME 将其插入到当前文件的光标位置后。:r !dir 可以读取 dir 命令的输出并将其放到当前文件的光标后面。 选项设置1234567:set xxx ，一些有用的选项如下：&apos;ic&apos; &apos;ignorecase&apos; 查找时忽略字母大小写&apos;is&apos; &apos;incsearch&apos; 查找短语时显示部分匹配&apos;hls&apos; &apos;hlsearch&apos; 高亮显示所有的匹配短语选项名可以用完整版本，也可以用缩略版本。在选项前加上 no 可以关闭选项： :set noic 帮助1234567891011121314:help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。:help cmd 可以找到关于 cmd 命令的帮助。CTRL-W CTRL-W 可以使您在窗口之间跳转。:q 以关闭帮助窗口可以创建 vimrc 启动脚本文件用来保存偏好设置。读取vimrc 示例文件 :r $VIMRUNTIME/vimrc_example.vim输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。按 &lt;TAB&gt; 可以使用一个补全。 以后再研究z 和 fzf 快速搜索zsh 比vim更好用 ColorPix 取色工具]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown说明]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[本文转载自 younghz的markdown库 部分内容稍作增改 主要内容 Markdown是什么？谁创造了它？为什么要使用它？怎么使用？谁在用？尝试一下 正文Markdown是什么？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 谁创造了它？它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于2013年1月11日自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 他有着足以让你跪拜的人生经历： 14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。 为什么要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail, MarkdownOutlook) 摆脱Word（我不是认真的）。 怎么使用？如果不算扩展，Markdown的语法绝对简单到让你爱不释手。 Markdown语法主要分为如下几大部分：标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’。 标题两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 2）使用#，可表示1-6级标题。 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如： > 区块引用>&gt; 嵌套引用 效果： 区块引用 嵌套引用 代码和语法高亮代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main(){ printf(“Hello, Markdown.”);} 代码区块： void main() { printf(&quot;Hello, Markdown.&quot;); } 注意:需要和普通段落之间存在空行。 行内代码本文是一篇介绍`Markdown`的文章 效果：本文是一篇介绍Markdown的文章 语法高亮 ```html Syntax Highlighting``` 效果：1&lt;div&gt;Syntax Highlighting&lt;/div&gt; ```python s = “Python syntax highlighting” print s``` 效果：12s = "Python syntax highlighting"print s 强调在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，_斜体_粗体，粗体 列表使用·、+、或-标记无序列表，如： -（+*） 第一项-（+*） 第二项- （+*）第三项 注意：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线分割线最常使用就是三个或以上*，还可以使用-和_。 链接链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https://github.com/younghz/Markdown “Markdown”)。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https://github.com/younghz/Markdown “Markdown”[2]:https://github.com/younghz/Markdown “Markdown” 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;不出现在区块中。 图片添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 行内式： ![替代文字](http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字”) 效果： 参考式： ![替代文字][logo][logo]:http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字” 效果：![替代文字][logo][logo]:markdown/logo.png “标题文字” 注意：Markdown还支持传统html写法，比如&lt;a href=”https://www.w3cschool.cn/&quot;\&gt;W3Cschool&lt;/a> 反斜杠\相当于反转义作用。使符号成为普通符号。 符号’`’起到标记作用。如： `ctrl+a` 效果： ctrl+a 表格列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 颜色和字体&lt;font color=0433ff face=&quot;verdana&quot; size=&quot;3&quot;&gt;颜色和字体&lt;/font&gt; 效果： 颜色和字体 谁在用？Markdown的使用者： GitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 尝试一下 Chrome下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。 在线的dillinger.io评价也不错 Windowns下的MarkdownPad也用过，不过免费版的体验不是很好。 Mac下的Mou是国人贡献的，口碑很好。 Linux下的ReText不错。 当然，最终境界永远都是笔下是语法，心中格式化 :)。 注意：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber](http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。 以上基本是所有traditonal markdown的语法。 关于其它扩展语法可参见具体工具的使用说明。]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html语言学习01]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhtml001%2F</url>
    <content type="text"><![CDATA[起源 HTML 全称 HyperText Markup Language 超文本标记语言，常与CSS、JavaScript一起设计网页。 HTML 主要负责网站的结构和内容 CSS 主要负责网站的样式 JavaScript 主要负责网站的行为 HTML和CSS的标准均由W3C(万维网联盟)指定和发布 本文主要介绍HTML5的常用标签 HTML 学习网站 MDN W3school Quizlet HTML 常用标签a anchor 锚元素 可以创建一个到其他网页、文件、同一页面其他位置、电子邮件地址或者其他URL的超链接 描述部分可以嵌套img使用 _top/_blank/_parent/_slef 示例：&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt; 伪协议，待补充。&lt;a href=&quot;javascript:;&quot; name=&quot;price&quot;&gt;test&lt;/a&gt; ###head 定义网页相关元数据，如标题、引用的样式、脚本等 示例：12345&lt;html&gt; &lt;head&gt; &lt;title&gt;文档标题&lt;/title&gt; &lt;/head&gt;&lt;/html&gt; body HTML body 元素表示文档的内容。 示例：&lt;body&gt;内容&lt;/body&gt; footer 定义网页页脚。页脚通常包含：作者、版权、相关链接等信息 示例：&lt;footer&gt;页脚&lt;/footer&gt; br break row 强制换行 示例：&lt;br&gt; hr horizontal rule 水平线，常表示段落级元素之间的主题转换。 示例：&lt;hr&gt; button 按钮 示例：&lt;button name=&quot;button&quot;&gt;Click me&lt;/button&gt; h1~h6 Heading Heading元素呈现了六个不同级别的标题 示例：&lt;h1&gt;一级标题&lt;/h1&gt; p paragraph 表示文本的一个段落 示例: &lt;p&gt;段落&lt;/p&gt; dl description list 一个包含术语描述以及术语定义的列表，通常用于展示词汇表或者键-值对列表 子元素 全称 含义 dt description term 描述术语 dd description definition 术语定义 示例：1234&lt;dl class="dt"&gt; &lt;dt&gt;Mac&lt;/dt&gt; &lt;dd&gt;a computer&lt;/dd&gt;&lt;/dl&gt; ul un-ordered list 无序列表 内部li代表list item 示例：12345&lt;ul&gt; &lt;li&gt;橘子&lt;/li&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;橙子&lt;/li&gt;&lt;/ul&gt; ol ordered list 有序列表 内部li代表list item 示例：12345&lt;ol&gt; &lt;li&gt;第一名&lt;/li&gt; &lt;li&gt;第二名&lt;/li&gt; &lt;li&gt;第三名&lt;/li&gt;&lt;/ol&gt; div HTML Content Division element 没有默认样式 HTML 网页分区元素 通用型的流内容容器 block-level element 示例：123&lt;div&gt; &lt;p&gt;一切由你做主&lt;/p&gt;&lt;/div&gt; span 没有默认样式 短语内容的通用行内容器 inline element1&lt;P&gt;&lt;span&gt;Some text&lt;/span&gt;&lt;/P&gt; img image 代表网页中的图像，如果无法显示图像，使用alt属性定义的内容替换 显示图像：&lt;img src=&quot;mdn-logo-sm.png&quot; alt=&quot;MDN&quot;&gt; 图像链接：&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;mdn-logo-sm.png&quot; alt=&quot;MDN&quot;&gt;&lt;/a&gt; nav navigation bar 导航栏，描绘一个含有多个超链接的区域1234567&lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; link 定义了外部资源和当前文档的关系，最常用于链接样式表示例：&lt;link href=&quot;default.css&quot; rel=&quot;stylesheet&quot; title=&quot;Fancy&quot;&gt; section 章节，一般包含&lt;h1&gt;-&lt;h6&gt; 示例：123456789&lt;section&gt; &lt;h1&gt;Introduction&lt;/h1&gt; &lt;p&gt;...&lt;/p&gt;&lt;/section&gt;&lt;section&gt; &lt;h1&gt;Equipment&lt;/h1&gt; &lt;p&gt;...&lt;/p&gt;&lt;/section&gt; form &amp; input form一个包含交互控件的区域(表单) input 用于接受来自用户的数据,为基于表单创建交互式控件 示例： 123456789101112131415161718192021222324252627282930313233343536&lt;!--示例一--&gt;&lt;form action="" method="get" class="form-example"&gt; &lt;div class="form-example"&gt; &lt;label for="name"&gt;Enter your name: &lt;/label&gt; &lt;input type="text" name="name" id="name" required&gt; &lt;/div&gt; &lt;div class="form-example"&gt; &lt;label for="email"&gt;Enter your email: &lt;/label&gt; &lt;input type="email" name="email" id="email" required&gt; &lt;/div&gt; &lt;div class="form-example"&gt; &lt;input type="submit" value="Subscribe!"&gt; &lt;/div&gt;&lt;/form&gt;&lt;!-- 一个简单的表单，这个表单会发送一个 GET 请求 --&gt;&lt;form action=""&gt; &lt;label for="GET-name"&gt;Name:&lt;/label&gt; &lt;input id="GET-name" type="text" name="name"&gt; &lt;input type="submit" value="Save"&gt;&lt;/form&gt;&lt;!-- 一个简单的表单，发送 POST 请求 --&gt;&lt;form action="" method="post"&gt; &lt;label for="POST-name"&gt;Name:&lt;/label&gt; &lt;input id="POST-name" type="text" name="name"&gt; &lt;input type="submit" value="Save"&gt;&lt;/form&gt;&lt;!-- 使用 fieldset, legend, and label 的表单 --&gt;&lt;form action="" method="post"&gt; &lt;fieldset&gt; &lt;legend&gt;Title&lt;/legend&gt; &lt;input type="radio" name="radio" id="radio"&gt; &lt;label for="radio"&gt;Click me&lt;/label&gt; &lt;/fieldset&gt;&lt;/form&gt; 效果： Enter your name: Enter your email: Name: Name: Title Click me table 二维表格数据 thead tbody tfoot td table data tr table row th table head col colgroup 待补充示例：123456789101112131415161718192021&lt;p&gt;Table with thead, tfoot, and tbody&lt;/p&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Header content 1&lt;/th&gt; &lt;th&gt;Header content 2&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Body data 1&lt;/td&gt; &lt;td&gt;Body data 2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;Footer data 1&lt;/td&gt; &lt;td&gt;Footer data 2&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;&lt;/table&gt; 效果： Header content 1 Header content 2 Body data 1 Body data 2 Footer data 1 Footer data 2 small 副标题，使文字变小一号示例：&lt;small&gt;word.&lt;/small&gt; strong 强调语气，表示十分重要示例：&lt;strong&gt;words&lt;/strong&gt; bold 粗体示例：&lt;b&gt;words&lt;/b&gt; kbd Keyboard Input 键盘输入元素，表示用户数入示例：&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt; video 嵌入视频内容示例：&lt;video src=&quot;videofile.ogg&quot; autoplay poster=&quot;posterimage.jpg&quot;&gt;葫芦娃01&lt;/video&gt; audio 嵌入语音内容示例：&lt;audio src=&quot;audio.ogg&quot; autoplay&gt;葫芦娃02&lt;/audio&gt; svg Scalable Vector Graphics 不规则图形 未完待续 ###iframe 内联框架元素，将另一个HTML页面嵌入到当前页面 示例：12345&lt;iframe src="#" title="iframe example 1" width="400" height="300"&gt;&lt;/iframe&gt; 空元素 empty element 不存在子节点的元素 HTML中的空元素：1234567891011121314151617&lt;area&gt;&lt;base&gt;&lt;br&gt;&lt;col&gt;&lt;colgroup&gt; when the span is present&lt;command&gt;&lt;embed&gt;&lt;hr&gt;&lt;img&gt;&lt;input&gt;&lt;keygen&gt;&lt;link&gt;&lt;meta&gt;&lt;param&gt;&lt;source&gt;&lt;track&gt;&lt;wbr&gt; 可替换标签 可替换标签的展示不是由css控制，外观渲染独立。 HTML典型可替换元素：&lt;img&gt; &lt;object&gt; &lt;video&gt; 表单元素：&lt;textarea&gt; 、&lt;input&gt; 特殊情况下的可替换元素：&lt;audio&gt; 、&lt;canvas&gt; 手机自适应meta:vp 页面宽度由设备宽度决定不允许缩放初始缩放比例1:1最大缩放比例1:1最小缩放比例1:1]]></content>
      <categories>
        <category>Html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http1.1学习]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhttp001%2F</url>
    <content type="text"><![CDATA[HTTP起源HTTP全称HTTP即HyperText Transfer Protocol，超文本传输协议，是应用层协议，万维网的数据通信基础。本文主要介绍HTTP1.1。 HTTP1.1改进 缓存处理 带宽优化及网络连接的使用 错误通知的管理 消息在网络中的发送 互联网地址的维护 安全性及完整性 HTTP2.0最初由google研发，2015年5月作为互联网标准正式发布。 HTTP请求请求方法8种 GET读取数据 HEAD与GET一样是发出资源请求，服务器不返回资源的文本部分。 POST提交数据（文件或表单） PUT上传最新内容（多用于修改） DELETE删除资源 TRACE回显服务器收到的请求，用于测试或诊断 OPTIONS返回资源支持的所有HTTP方法 CONNECT将连接改为管道方式的代理服务器，多用于SSL加密服务的连接。 HTTP HeaderHTTP Header详细说明 HTTP Header Content-TypeContent-Type详细说明 常用的Content-Type Type application 123456789101112application/EDI-X12 application/EDIFACT application/javascript application/octet-stream application/ogg application/pdf application/xhtml+xml application/x-shockwave-flash application/json application/ld+json application/xml application/zip Type audio 1234audio/mpeg audio/x-ms-wma audio/vnd.rn-realaudio audio/x-wav Type image 123456789image/gif image/jpeg image/png image/tiff image/vnd.microsoft.icon image/x-icon image/vnd.djvu image/svg+xml Type multipart 1234multipart/mixed multipart/alternative multipart/related (using by MHTML (HTML mail).) Type text 123456text/css text/csv text/html text/javascript (已废弃) text/plain text/xml Type video 1234567video/mpeg video/mp4 video/quicktime video/x-ms-wmv video/x-msvideo video/x-flv video/webm HTTP响应HTTP响应状态码详细说明 常用status_code: 1xx消息–请求已经被服务器接受，继续处理不常用，略 2xx成功–请求已成功被服务器接收、理解、并接受常用响应如下： 201 Created：创建成功，返回URI 202 Accepted：服务器已接受请求，多用于异步。 204 No Content: 服务器成功处理了请求，不返回任何内容。 3xx重定向–需要后续操作才能完成这一请求常用响应如下： 301 Moved Permanently：资源已永久移动，在Location中返回新的若干个URI。 302 Found：临时重定向 303 See Other：为了替代302，实现POST后的GET重定向。 304 Not Modified: 资源未改变，使用缓存。 4xx请求错误–请求含有词法错误或者无法被执行常用响应如下： 400 Bad Request：客户端明显错误 401 Unauthorized：未认证 403 Forbidden：拒绝执行 404 Not Found：找不到资源 405 Method Not Allowed 408 Request Timeout 409 Conflict 423 Locked 429 Too Many Requests 5xx服务器错误–服务器在处理某个正确请求时发生错误常用响应如下： 500 Internal Server Error: 502 Bad Gateway: 503 Service Unavailable 504 Gateway Timeout HTTP—ETag详细说明 ETag提供一种缓存验证机制，如果资源改变，hash之后的ETag值就会变化。ETag： &quot;686897696a7c876b7e&quot; CURL命令学习定义Transfers data from or to a server.支持大多数协议，包括HTTP，FTP and POP3 ，这里主要介绍HTTP相关的。 全称Command Line URL Viewer，是一个Linux命令行工具。 用法简介 下载URL内容到文件[output]：curl http://www.baidu.com -o filename 将url输出保存在对应的文件名下[remote-name]：curl -O http://www.baidu.com/filename 跟随重定向[Location]，自动续传[Continue]，保存到对应的文件名下：curl -O -L -C http://www.baidu.com/filename 模拟post请求[data]:curl -d ‘name=bob’ http://www.baidu.com/form 指定method(默认GET）和[header]:curl -H ‘X-My-Header: 123’ -X PUT http://www.baidu.com 发送Json数据，指定content-type：curl -d ‘{“name”: “bob”}’ -H ‘Content-Type: application/json’ http://www.baidu.com/users/1234 使用用户认证[user authentication]：curl -u username:password http://www.baidu.com 传递客户端证书[certificate]和资源密钥[key]，跳过证书验证：curl –cert client.pem –key key.pem –insecure https://www.baidu.com silence &amp; verbosecurl -s -v – http://www.baidu.com]]></content>
      <categories>
        <category>Http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Ftest%2F</url>
    <content type="text"><![CDATA[test12345678910111213141516171819202122inline-block不用关注html标签没有块级元素和内联元素的区别的，css才有html不应该管样式，只管内容html定义结构和内容css管样式js管什么？alt 可选内容alternativea 标签全称 anchor 连接 锚banner 底层大图form 必须有提交按钮form button自动升级为提交按钮， 如果type=button不会，普通按钮，反而没有用？submit 可以提交checkbox 勾选框label标记input老司机写法：label包含inputinput要有name，不然实际没有起作用checkbox 多选radio 单选select 下拉列表，多选，单选textarea 多行输入colgroup col现在都用class了设定表格样式，collapse 12子元素float left 浮动 父元素必须添加clearfixinherit 继承 123456720190203所有非空标签都有伪类比如 ::before ::after有点像python里面的with或者tearup，teardown。不过用法不太一样？剪切板管理器yd 插件css shadow generator]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo教程001]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fhexo001%2F</url>
    <content type="text"><![CDATA[123456hexo new $namehexo generatehexo deployhexo generate &amp;&amp; deployhexo s -ghexo clean 1234567hexo new page categoriestype: &quot;categories&quot;categories: hexohexo new page tagstype: &quot;tags&quot;tags: [hexo] 12themegit clone git@github.com:iissnan/hexo-theme-next.git]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fgit001%2F</url>
    <content type="text"><![CDATA[本文主要介绍git init git add git commit的使用方法git init1234567Initializes a new local Git repository. - Initialize a new local repository: git init - Initialize a barebones repository, suitable for use as a remote over ssh: git init --bare git add12345678910111213141516Adds changed files to the index.- Add a file to the index: git add path/to/file- Add all files (tracked and untracked): git add -A- Only add already tracked files: git add -u- Also add ignored files: git add -f- Add parts of a file interactively: git add -p path/to/file git commit1234567891011121314Commit files to the repository.- Commit staged files to the repository with a message: git commit -m message- Auto stage all modified files and commit with a message: git commit -a -m message- Replace the last commit with currently staged changes: git commit --ame - Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template： -v : --verbose git commit -v git merge钻石合并git merge bugFix git rebase线性合并-i 交互式 interactivegit rebase -i HEAD~4 从前四次选择git rebase -i master 从当前分支选择然后和master合并git rebase bugFix master 把bugFix分支的内容合并到master分支上 git describe描述离你最近的taggit describe mastergit describe c1v1_2_gc5显示距离2个提交有一个tag名称是v1，提交记录是c5 git branch -fgit branch -f master c3把分支强制指定到提交c3 git cherry-pickgit cherry-pick c3 c5 c7把某一个分支的提交抓取到当前分支的HEAD上 相对引用^ 向上移动一个提交记录^2 多个父节点时，选择第二个父节点~ 向上移动多个提交记录 git checkout切换分支 分离HEADgit checkout $branchgit checkout c1 git stash备份更改，暂存到git中，回到干净的工作目录。git stash 备份当前git stash listgit stash popgit stash cleargit stash apply 取出某一个stash]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F24%2Flinux001%2F</url>
    <content type="text"><![CDATA[介绍ls cat mv touch 的基本用法ls12345678910111213141516171819List directory contents. - List files one per line: ls -1 - List all files, including hidden files: ls -a - Long format list (permissions, ownership, size and modification date) of all files: ls -la - Long format list with size displayed using human readable units (KB, MB, GB): ls -lh - Long format list sorted by size (descending): ls -lS - Long format list of all files, sorted by modification date (oldest first): ls -ltr cat12345678910111213Print and concatenate files.- Print the contents of a file to the standard output: cat file- Concatenate several files into the target file: cat file1 file2 &gt; target_file- Append several files into the target file: cat file1 file2 &gt;&gt; target_file- Number all output lines: cat -n file mv12345678910111213141516Move or rename files and directories.- Move files in arbitrary locations: mv source target- Do not prompt for confirmation before overwriting existing files: mv -f source target- Prompt for confirmation before overwriting existing files, regardless of file permissions: mv -i source target- Do not overwrite existing files at the target: mv -n source target- Move files in verbose mode, showing files after they are moved: mv -v source target touch12345678910Change a file access and modification times (atime, mtime).- Create a new empty file(s) or change the times for existing file(s) to current time: touch filename- Set the times on a file to a specific date and time: touch -t YYYYMMDDHHMM.SS filename- Use the times from a file to set the times on a second file: touch -r filename filename2]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
