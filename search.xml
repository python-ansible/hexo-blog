<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[vim学习]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F31%2Fvim001%2F</url>
    <content type="text"><![CDATA[vim教程,vim命令行模式 vimtutoroperator [number] motionvim支持重复操作，只要在motion前加入[number]* 第一讲 12345678910111213141. 光标在屏幕文本中的移动既可以用箭头键，也可以使用 hjkl 字母键。 h (左移) j (下行) k (上行) l (右移)2. 欲进入 Vim 编辑器(从命令行提示符)，请输入：vim 文件名 &lt;回车&gt;3. 欲退出 Vim 编辑器，请输入 &lt;ESC&gt; :q! &lt;回车&gt; 放弃所有改动。 或者输入 &lt;ESC&gt; :wq &lt;回车&gt; 保存改动。4. 在正常模式下删除光标所在位置的字符，请按： x5. 欲插入或添加文本，请输入： i 输入欲插入文本 &lt;ESC&gt; 在光标前插入文本 A 输入欲添加文本 &lt;ESC&gt; 在一行后添加文本 第二讲 1234567891011121314151617181920212223241. 欲从当前光标删除至下一个单词，请输入：dw2. 欲从当前光标删除至当前行末尾，请输入：d$3. 欲删除整行，请输入：dd4. 欲删除到当前单词末尾，请输入：de 2dd #ndd删除多行d4w&amp;d3w #找到大写字母单词 this line FGHI JK LMN OP of words is Q RS TUV cleaned up.—》this line of words is cleaned up.4. 欲重复一个动作，请在它前面加上一个数字：2w2w #向前移动两个单词3e #向前移动三个单词的末尾0 #移动到行首5. 在正常模式下修改命令的格式是： operator [number] motion 其中： operator - 操作符，代表要做的事情，比如 d 代表删除 [number] - 可以附加的数字，代表动作重复的次数 motion - 动作，代表在所操作的文本上的移动，例如 w 代表单词(word)， $ 代表行末等等。6. 欲移动光标到行首，请按数字0键：07. 欲撤消以前的操作，请输入：u (小写的u) 欲撤消在一行中所做的改动，请输入：U (大写的U) 欲撤消以前的撤消命令，恢复以前的操作结果，请输入：CTRL-R 第三讲 12345678910111213141516171819202122 1. 要重新置入已经删除的文本内容，请按小写字母 p 键。该操作可以将已删除 的文本内容置于光标之后。如果最后一次删除的是一个整行，那么该行将置 于当前光标所在行的下一行。 2. 要替换光标所在位置的字符，请输入小写的 r 和要替换掉原位置字符的新字 符即可。 3. 更改类命令允许您改变从当前光标所在位置直到动作指示的位置中间的文本。 比如输入 ce 可以替换当前光标到单词的末尾的内容；输入 c$ 可以替换当 前光标到行末的内容。 4. 更改类命令的格式是： c [number] motionp #dd删除后的内容，会放在vim寄存器中，p可以粘贴yy-p #即复制粘贴r #单字符替换，后面跟上替换的字符ce #单个单词的替换，修改cwc [number] e|w #多个单词的替换c$ #替换到行末 第四讲 123456789101112131415161718191. CTRL-G 用于显示当前光标所在位置和文件状态信息。 G 用于将光标跳转至文件最后一行。 先敲入一个行号然后输入大写 G 则是将光标移动至该行号代表的行。 gg 用于将光标跳转至文件第一行。 [number]G #跳转任意行2. 输入 / 然后紧随一个字符串是在当前所编辑的文档中正向查找该字符串。 输入 ? 然后紧随一个字符串则是在当前所编辑的文档中反向查找该字符串。 完成一次查找之后按 n 键是重复上一次的命令，可在同一方向上查 找下一个匹配字符串所在；或者按大写 N 向相反方向查找下一匹配字符串所在。 CTRL-O 带您跳转回较旧的位置，CTRL-I 则带您到较新的位置。3. 如果光标当前位置是括号(、)、[、]、&#123;、&#125;，按 % 会将光标移动到配对的括号上。4. 在一行内替换头一个字符串 old 为新的字符串 new，请输入 :s/old/new 在一行内替换所有的字符串 old 为新的字符串 new，请输入 :s/old/new/g 在两行内替换所有的字符串 old 为新的字符串 new，请输入 :#,#s/old/new/g 在文件内替换所有的字符串 old 为新的字符串 new，请输入 :%s/old/new/g 进行全文替换时询问用户确认每个替换需添加 c 标志 :%s/old/new/gc 第五讲 12345678910111213141516171. :!command 用于执行一个外部命令 command。 请看一些实际例子： (MS-DOS) (Unix) :!dir :!ls - 用于显示当前目录的内容。 :!del FILENAME :!rm FILENAME - 用于删除名为 FILENAME 的文件。2. :w FILENAME 可将当前 VIM 中正在编辑的文件保存到名为 FILENAME 的文 件中。3. v motion :w FILENAME 可将当前编辑文件中可视模式下选中的内容保存到文件 FILENAME 中。4. :r FILENAME 可提取磁盘文件 FILENAME 并将其插入到当前文件的光标位置 后面。5. :r !dir 可以读取 dir 命令的输出并将其放置到当前文件的光标位置后面。 第六讲 123456789101112131415161718191. 输入小写的 o 可以在光标下方打开新的一行并进入插入模式。 输入大写的 O 可以在光标上方打开新的一行。2. 输入小写的 a 可以在光标所在位置之后插入文本。 输入大写的 A 可以在光标所在行的行末之后插入文本。3. e 命令可以使光标移动到单词末尾。4. 操作符 y 复制文本，p 粘贴先前复制的文本。5. 输入大写的 R 将进入替换模式，直至按 &lt;ESC&gt; 键回到正常模式。6. 输入 :set xxx 可以设置 xxx 选项。一些有用的选项如下： &apos;ic&apos; &apos;ignorecase&apos; 查找时忽略字母大小写 &apos;is&apos; &apos;incsearch&apos; 查找短语时显示部分匹配 &apos;hls&apos; &apos;hlsearch&apos; 高亮显示所有的匹配短语 选项名可以用完整版本，也可以用缩略版本。7. 在选项前加上 no 可以关闭选项： :set noic 第七讲 12345678910111213141. 输入 :help 或者按 &lt;F1&gt; 键或 &lt;Help&gt; 键可以打开帮助窗口。2. 输入 :help cmd 可以找到关于 cmd 命令的帮助。3. 输入 CTRL-W CTRL-W 可以使您在窗口之间跳转。4. 输入 :q 以关闭帮助窗口5. 您可以创建一个 vimrc 启动脚本文件用来保存您偏好的设置。 读取vimrc 示例文件 :r $VIMRUNTIME/vimrc_example.vim6. 当输入 : 命令时，按 CTRL-D 可以查看可能的补全结果。 按 &lt;TAB&gt; 可以使用一个补全。 以后再研究 z 和 fzf 快速搜索zsh 比vim更好用 ColorPix 取色工具]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown说明]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fmarkdown%2F</url>
    <content type="text"><![CDATA[本文转载自 younghz的markdown库 部分内容稍作增改 主要内容 Markdown是什么？谁创造了它？为什么要使用它？怎么使用？谁在用？尝试一下 正文Markdown是什么？Markdown是一种轻量级标记语言，它以纯文本形式(易读、易写、易更改)编写文档，并最终以HTML格式发布。Markdown也可以理解为将以MARKDOWN语法编写的语言转换成HTML内容的工具。 谁创造了它？它由Aaron Swartz和John Gruber共同设计，Aaron Swartz就是那位于2013年1月11日自杀,有着开挂一般人生经历的程序员。维基百科对他的介绍是：软件工程师、作家、政治组织者、互联网活动家、维基百科人。 他有着足以让你跪拜的人生经历： 14岁参与RSS 1.0规格标准的制订。 2004年入读斯坦福，之后退学。 2005年创建Infogami，之后与Reddit合并成为其合伙人。 2010年创立求进会（Demand Progress），积极参与禁止网络盗版法案（SOPA）活动，最终该提案被撤回。 2011年7月19日，因被控从MIT和JSTOR下载480万篇学术论文并以免费形式上传于网络被捕。 2013年1月自杀身亡。 天才都有早逝的归途。 为什么要使用它？ 它是易读（看起来舒服）、易写（语法简单）、易更改纯文本。处处体现着极简主义的影子。 兼容HTML，可以转换为HTML格式发布。 跨平台使用。 越来越多的网站支持Markdown。 更方便清晰地组织你的电子邮件。（Markdown-here, Airmail, MarkdownOutlook) 摆脱Word（我不是认真的）。 怎么使用？如果不算扩展，Markdown的语法绝对简单到让你爱不释手。 Markdown语法主要分为如下几大部分：标题，段落，区块引用，代码区块，强调，列表，分割线，链接，图片，反斜杠 \，符号’`’。 标题两种形式：1）使用=和-标记一级和二级标题。 一级标题=========二级标题--------- 效果： 2）使用#，可表示1-6级标题。 # 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题###### 六级标题 效果： 段落段落的前后要有空行，所谓的空行是指没有文字内容。若想在段内强制换行的方式是使用两个以上空格加上回车（引用中换行省略回车）。 区块引用在段落的每行或者只在第一行使用符号&gt;,还可使用多个嵌套引用，如： > 区块引用>&gt; 嵌套引用 效果： 区块引用 嵌套引用 代码和语法高亮代码区块的建立是在每行加上4个空格或者一个制表符（如同写代码一样）。如普通段落： void main(){ printf(“Hello, Markdown.”);} 代码区块： void main() { printf(&quot;Hello, Markdown.&quot;); } 注意:需要和普通段落之间存在空行。 行内代码本文是一篇介绍`Markdown`的文章 效果：本文是一篇介绍Markdown的文章 语法高亮 ```html Syntax Highlighting``` 效果：1&lt;div&gt;Syntax Highlighting&lt;/div&gt; ```python s = “Python syntax highlighting” print s``` 效果：12s = "Python syntax highlighting"print s 强调在强调内容两侧分别加上*或者_，如： *斜体*，_斜体_**粗体**，__粗体__ 效果： 斜体，_斜体_粗体，粗体 列表使用·、+、或-标记无序列表，如： -（+*） 第一项-（+*） 第二项- （+*）第三项 注意：标记后面最少有一个_空格_或制表符。若不在引用区块中，必须和前方段落之间存在空行。 效果： 第一项 第二项 第三项 有序列表的标记方式是将上述的符号换成数字,并辅以.，如： 1 . 第一项2 . 第二项3 . 第三项 效果： 第一项 第二项 第三项 分割线分割线最常使用就是三个或以上*，还可以使用-和_。 链接链接可以由两种形式生成：行内式和参考式。行内式： [younghz的Markdown库](https://github.com/younghz/Markdown “Markdown”)。 效果： younghz的Markdown库。 参考式： [younghz的Markdown库1][1][younghz的Markdown库2][2][1]:https://github.com/younghz/Markdown “Markdown”[2]:https://github.com/younghz/Markdown “Markdown” 效果： younghz的Markdown库1younghz的Markdown库2 注意：上述的[1]:https:://github.com/younghz/Markdown &quot;Markdown&quot;不出现在区块中。 图片添加图片的形式和链接相似，只需在链接的基础上前方加一个！。 行内式： ![替代文字](http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字”) 效果： 参考式： ![替代文字][logo][logo]:http://statics.w3cschool.cn/images/w3c/index-logo.png “标题文字” 效果：![替代文字][logo][logo]:markdown/logo.png “标题文字” 注意：Markdown还支持传统html写法，比如&lt;a href=”https://www.w3cschool.cn/&quot;\&gt;W3Cschool&lt;/a> 反斜杠\相当于反转义作用。使符号成为普通符号。 符号’`’起到标记作用。如： `ctrl+a` 效果： ctrl+a 表格列表的使用(非traditonal markdown)： 用|表示表格纵向边界，表头和表内容用-隔开，并可用:进行对齐设置，两边都有:则表示居中，若不加:则默认左对齐。 代码库 链接 MarkDown https://github.com/younghz/Markdown MarkDownCopy https://github.com/younghz/Markdown 颜色和字体&lt;font color=0433ff face=&quot;verdana&quot; size=&quot;3&quot;&gt;颜色和字体&lt;/font&gt; 效果： 颜色和字体 谁在用？Markdown的使用者： GitHub 简书 Stack Overflow Apollo Moodle Reddit 等等 尝试一下 Chrome下的插件诸如stackedit与markdown-here等非常方便，也不用担心平台受限。 在线的dillinger.io评价也不错 Windowns下的MarkdownPad也用过，不过免费版的体验不是很好。 Mac下的Mou是国人贡献的，口碑很好。 Linux下的ReText不错。 当然，最终境界永远都是笔下是语法，心中格式化 :)。 注意：不同的Markdown解释器或工具对相应语法（扩展语法）的解释效果不尽相同，具体可参见工具的使用说明。虽然有人想出面搞一个所谓的标准化的Markdown，[没想到还惹怒了健在的创始人John Gruber](http://blog.codinghorror.com/standard-markdown-is-now-common-markdown/)。 以上基本是所有traditonal markdown的语法。 关于其它扩展语法可参见具体工具的使用说明。]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html语言学习01]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhtml001%2F</url>
    <content type="text"><![CDATA[起源 HTML 全称 HyperText Markup Language 超文本标记语言，常与CSS、JavaScript一起设计网页。 HTML 主要负责网站的结构和内容 CSS 主要负责网站的样式 JavaScript 主要负责网站的行为 HTML和CSS的标准均由W3C(万维网联盟)指定和发布 本文主要介绍HTML5的常用标签 HTML 学习网站 MDN W3school Quizlet HTML 常用标签a anchor 锚元素 可以创建一个到其他网页、文件、同一页面其他位置、电子邮件地址或者其他URL的超链接 描述部分可以嵌套img使用 _top/_blank/_parent/_slef 示例：&lt;a href=&quot;http://www.baidu.com&quot;&gt;百度&lt;/a&gt; 伪协议，待补充。&lt;a href=&quot;javascript:;&quot; name=&quot;price&quot;&gt;test&lt;/a&gt; ###head 定义网页相关元数据，如标题、引用的样式、脚本等 示例：12345&lt;html&gt; &lt;head&gt; &lt;title&gt;文档标题&lt;/title&gt; &lt;/head&gt;&lt;/html&gt; body HTML body 元素表示文档的内容。 示例：&lt;body&gt;内容&lt;/body&gt; footer 定义网页页脚。页脚通常包含：作者、版权、相关链接等信息 示例：&lt;footer&gt;页脚&lt;/footer&gt; br break row 强制换行 示例：&lt;br&gt; hr horizontal rule 水平线，常表示段落级元素之间的主题转换。 示例：&lt;hr&gt; button 按钮 示例：&lt;button name=&quot;button&quot;&gt;Click me&lt;/button&gt; h1~h6 Heading Heading元素呈现了六个不同级别的标题 示例：&lt;h1&gt;一级标题&lt;/h1&gt; p paragraph 表示文本的一个段落 示例: &lt;p&gt;段落&lt;/p&gt; dl description list 一个包含术语描述以及术语定义的列表，通常用于展示词汇表或者键-值对列表 子元素 全称 含义 dt description term 描述术语 dd description definition 术语定义 示例：1234&lt;dl class="dt"&gt; &lt;dt&gt;Mac&lt;/dt&gt; &lt;dd&gt;a computer&lt;/dd&gt;&lt;/dl&gt; ul un-ordered list 无序列表 内部li代表list item 示例：12345&lt;ul&gt; &lt;li&gt;橘子&lt;/li&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;橙子&lt;/li&gt;&lt;/ul&gt; ol ordered list 有序列表 内部li代表list item 示例：12345&lt;ol&gt; &lt;li&gt;第一名&lt;/li&gt; &lt;li&gt;第二名&lt;/li&gt; &lt;li&gt;第三名&lt;/li&gt;&lt;/ol&gt; div HTML Content Division element 没有默认样式 HTML 网页分区元素 通用型的流内容容器 block-level element 示例：123&lt;div&gt; &lt;p&gt;一切由你做主&lt;/p&gt;&lt;/div&gt; span 没有默认样式 短语内容的通用行内容器 inline element1&lt;P&gt;&lt;span&gt;Some text&lt;/span&gt;&lt;/P&gt; img image 代表网页中的图像，如果无法显示图像，使用alt属性定义的内容替换 显示图像：&lt;img src=&quot;mdn-logo-sm.png&quot; alt=&quot;MDN&quot;&gt; 图像链接：&lt;a href=&quot;#&quot;&gt;&lt;img src=&quot;mdn-logo-sm.png&quot; alt=&quot;MDN&quot;&gt;&lt;/a&gt; nav navigation bar 导航栏，描绘一个含有多个超链接的区域1234567&lt;nav&gt; &lt;ul&gt; &lt;li&gt;&lt;a href="#"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;About&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href="#"&gt;Contact&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;&lt;/nav&gt; link 定义了外部资源和当前文档的关系，最常用于链接样式表示例：&lt;link href=&quot;default.css&quot; rel=&quot;stylesheet&quot; title=&quot;Fancy&quot;&gt; section 章节，一般包含&lt;h1&gt;-&lt;h6&gt; 示例：123456789&lt;section&gt; &lt;h1&gt;Introduction&lt;/h1&gt; &lt;p&gt;...&lt;/p&gt;&lt;/section&gt;&lt;section&gt; &lt;h1&gt;Equipment&lt;/h1&gt; &lt;p&gt;...&lt;/p&gt;&lt;/section&gt; form &amp; input form一个包含交互控件的区域(表单) input 用于接受来自用户的数据,为基于表单创建交互式控件 示例： 123456789101112131415161718192021222324252627282930313233343536&lt;!--示例一--&gt;&lt;form action="" method="get" class="form-example"&gt; &lt;div class="form-example"&gt; &lt;label for="name"&gt;Enter your name: &lt;/label&gt; &lt;input type="text" name="name" id="name" required&gt; &lt;/div&gt; &lt;div class="form-example"&gt; &lt;label for="email"&gt;Enter your email: &lt;/label&gt; &lt;input type="email" name="email" id="email" required&gt; &lt;/div&gt; &lt;div class="form-example"&gt; &lt;input type="submit" value="Subscribe!"&gt; &lt;/div&gt;&lt;/form&gt;&lt;!-- 一个简单的表单，这个表单会发送一个 GET 请求 --&gt;&lt;form action=""&gt; &lt;label for="GET-name"&gt;Name:&lt;/label&gt; &lt;input id="GET-name" type="text" name="name"&gt; &lt;input type="submit" value="Save"&gt;&lt;/form&gt;&lt;!-- 一个简单的表单，发送 POST 请求 --&gt;&lt;form action="" method="post"&gt; &lt;label for="POST-name"&gt;Name:&lt;/label&gt; &lt;input id="POST-name" type="text" name="name"&gt; &lt;input type="submit" value="Save"&gt;&lt;/form&gt;&lt;!-- 使用 fieldset, legend, and label 的表单 --&gt;&lt;form action="" method="post"&gt; &lt;fieldset&gt; &lt;legend&gt;Title&lt;/legend&gt; &lt;input type="radio" name="radio" id="radio"&gt; &lt;label for="radio"&gt;Click me&lt;/label&gt; &lt;/fieldset&gt;&lt;/form&gt; 效果： Enter your name: Enter your email: Name: Name: Title Click me table 二维表格数据 thead tbody tfoot td table data tr table row th table head col colgroup 待补充示例：123456789101112131415161718192021&lt;p&gt;Table with thead, tfoot, and tbody&lt;/p&gt;&lt;table&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;Header content 1&lt;/th&gt; &lt;th&gt;Header content 2&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;Body data 1&lt;/td&gt; &lt;td&gt;Body data 2&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;Footer data 1&lt;/td&gt; &lt;td&gt;Footer data 2&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;&lt;/table&gt; 效果： Header content 1 Header content 2 Body data 1 Body data 2 Footer data 1 Footer data 2 small 副标题，使文字变小一号示例：&lt;small&gt;word.&lt;/small&gt; strong 强调语气，表示十分重要示例：&lt;strong&gt;words&lt;/strong&gt; bold 粗体示例：&lt;b&gt;words&lt;/b&gt; kbd Keyboard Input 键盘输入元素，表示用户数入示例：&lt;kbd&gt;Ctrl&lt;/kbd&gt; + &lt;kbd&gt;S&lt;/kbd&gt; video 嵌入视频内容示例：&lt;video src=&quot;videofile.ogg&quot; autoplay poster=&quot;posterimage.jpg&quot;&gt;葫芦娃01&lt;/video&gt; audio 嵌入语音内容示例：&lt;audio src=&quot;audio.ogg&quot; autoplay&gt;葫芦娃02&lt;/audio&gt; svg Scalable Vector Graphics 不规则图形 未完待续 ###iframe 内联框架元素，将另一个HTML页面嵌入到当前页面 示例：12345&lt;iframe src="#" title="iframe example 1" width="400" height="300"&gt;&lt;/iframe&gt; 空元素 empty element 不存在子节点的元素 HTML中的空元素：1234567891011121314151617&lt;area&gt;&lt;base&gt;&lt;br&gt;&lt;col&gt;&lt;colgroup&gt; when the span is present&lt;command&gt;&lt;embed&gt;&lt;hr&gt;&lt;img&gt;&lt;input&gt;&lt;keygen&gt;&lt;link&gt;&lt;meta&gt;&lt;param&gt;&lt;source&gt;&lt;track&gt;&lt;wbr&gt; 可替换标签 可替换标签的展示不是由css控制，外观渲染独立。 HTML典型可替换元素：&lt;img&gt; &lt;object&gt; &lt;video&gt; 表单元素：&lt;textarea&gt; 、&lt;input&gt; 特殊情况下的可替换元素：&lt;audio&gt; 、&lt;canvas&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[http1.1学习]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F27%2Fhttp001%2F</url>
    <content type="text"><![CDATA[HTTP起源HTTP全称HTTP即HyperText Transfer Protocol，超文本传输协议，是应用层协议，万维网的数据通信基础。本文主要介绍HTTP1.1。 HTTP1.1改进 缓存处理 带宽优化及网络连接的使用 错误通知的管理 消息在网络中的发送 互联网地址的维护 安全性及完整性 HTTP2.0最初由google研发，2015年5月作为互联网标准正式发布。 HTTP请求请求方法8种 GET读取数据 HEAD与GET一样是发出资源请求，服务器不返回资源的文本部分。 POST提交数据（文件或表单） PUT上传最新内容（多用于修改） DELETE删除资源 TRACE回显服务器收到的请求，用于测试或诊断 OPTIONS返回资源支持的所有HTTP方法 CONNECT将连接改为管道方式的代理服务器，多用于SSL加密服务的连接。 HTTP HeaderHTTP Header详细说明 HTTP Header Content-TypeContent-Type详细说明 常用的Content-Type Type application 123456789101112application/EDI-X12 application/EDIFACT application/javascript application/octet-stream application/ogg application/pdf application/xhtml+xml application/x-shockwave-flash application/json application/ld+json application/xml application/zip Type audio 1234audio/mpeg audio/x-ms-wma audio/vnd.rn-realaudio audio/x-wav Type image 123456789image/gif image/jpeg image/png image/tiff image/vnd.microsoft.icon image/x-icon image/vnd.djvu image/svg+xml Type multipart 1234multipart/mixed multipart/alternative multipart/related (using by MHTML (HTML mail).) Type text 123456text/css text/csv text/html text/javascript (已废弃) text/plain text/xml Type video 1234567video/mpeg video/mp4 video/quicktime video/x-ms-wmv video/x-msvideo video/x-flv video/webm HTTP响应HTTP响应状态码详细说明 常用status_code: 1xx消息–请求已经被服务器接受，继续处理不常用，略 2xx成功–请求已成功被服务器接收、理解、并接受常用响应如下： 201 Created：创建成功，返回URI 202 Accepted：服务器已接受请求，多用于异步。 204 No Content: 服务器成功处理了请求，不返回任何内容。 3xx重定向–需要后续操作才能完成这一请求常用响应如下： 301 Moved Permanently：资源已永久移动，在Location中返回新的若干个URI。 302 Found：临时重定向 303 See Other：为了替代302，实现POST后的GET重定向。 304 Not Modified: 资源未改变，使用缓存。 4xx请求错误–请求含有词法错误或者无法被执行常用响应如下： 400 Bad Request：客户端明显错误 401 Unauthorized：未认证 403 Forbidden：拒绝执行 404 Not Found：找不到资源 405 Method Not Allowed 408 Request Timeout 409 Conflict 423 Locked 429 Too Many Requests 5xx服务器错误–服务器在处理某个正确请求时发生错误常用响应如下： 500 Internal Server Error: 502 Bad Gateway: 503 Service Unavailable 504 Gateway Timeout HTTP—ETag详细说明 ETag提供一种缓存验证机制，如果资源改变，hash之后的ETag值就会变化。ETag： &quot;686897696a7c876b7e&quot; CURL命令学习定义Transfers data from or to a server.支持大多数协议，包括HTTP，FTP and POP3 ，这里主要介绍HTTP相关的。 全称Command Line URL Viewer，是一个Linux命令行工具。 用法简介 下载URL内容到文件[output]：curl http://www.baidu.com -o filename 将url输出保存在对应的文件名下[remote-name]：curl -O http://www.baidu.com/filename 跟随重定向[Location]，自动续传[Continue]，保存到对应的文件名下：curl -O -L -C http://www.baidu.com/filename 模拟post请求[data]:curl -d ‘name=bob’ http://www.baidu.com/form 指定method(默认GET）和[header]:curl -H ‘X-My-Header: 123’ -X PUT http://www.baidu.com 发送Json数据，指定content-type：curl -d ‘{“name”: “bob”}’ -H ‘Content-Type: application/json’ http://www.baidu.com/users/1234 使用用户认证[user authentication]：curl -u username:password http://www.baidu.com 传递客户端证书[certificate]和资源密钥[key]，跳过证书验证：curl –cert client.pem –key key.pem –insecure https://www.baidu.com]]></content>
      <categories>
        <category>http</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Ftest%2F</url>
    <content type="text"><![CDATA[test123456789101112131415161718192021222324252627282930313233343520190127inline-block不用关注html标签没有块级元素和内联元素的区别的，css才有html不应该管样式，只管内容html定义结构和内容css管样式js管什么？导航条 navigation baralt 可选内容alternativea 标签全称 anchor 连接 锚hr 水平分割线 horizon rulebanner 底层大图描述列表 description list dl其中有dt description term 描述词dd description definition 描述定义br 强制换行 break rowtr table rowp paragraph 段落form 必须有提交按钮form button自动升级为提交按钮， 如果type=button不会，普通按钮，反而没有用？submit 可以提交checkbox 勾选框label标记input老司机写法：label包含inputinput要有name，不然实际没有起作用checkbox 多选radio 单选select 下拉列表，多选，单选textarea 多行输入table 只有三个thead tr td(data) thtbody tr td thtfoot tr td thcolgroup col现在都用class了设定表格样式，collapse]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo教程001]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fhexo001%2F</url>
    <content type="text"><![CDATA[123hexo new $namehexo generatehexo deploy 1234567hexo new page categoriestype: &quot;categories&quot;categories: hexohexo new page tagstype: &quot;tags&quot;tags: [hexo] 12themegit clone git@github.com:iissnan/hexo-theme-next.git]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F25%2Fgit001%2F</url>
    <content type="text"><![CDATA[本文主要介绍git init git add git commit的使用方法git init1234567Initializes a new local Git repository. - Initialize a new local repository: git init - Initialize a barebones repository, suitable for use as a remote over ssh: git init --bare git add12345678910111213141516Adds changed files to the index.- Add a file to the index: git add path/to/file- Add all files (tracked and untracked): git add -A- Only add already tracked files: git add -u- Also add ignored files: git add -f- Add parts of a file interactively: git add -p path/to/file git commit1234567891011121314Commit files to the repository.- Commit staged files to the repository with a message: git commit -m message- Auto stage all modified files and commit with a message: git commit -a -m message- Replace the last commit with currently staged changes: git commit --ame - Show unified diff between the HEAD commit and what would be committed at the bottom of the commit message template： -v : --verbose git commit -v]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux基础命令]]></title>
    <url>%2Fhexo-blog%2F2019%2F01%2F24%2Flinux001%2F</url>
    <content type="text"><![CDATA[介绍ls cat mv touch 的基本用法ls12345678910111213141516171819List directory contents. - List files one per line: ls -1 - List all files, including hidden files: ls -a - Long format list (permissions, ownership, size and modification date) of all files: ls -la - Long format list with size displayed using human readable units (KB, MB, GB): ls -lh - Long format list sorted by size (descending): ls -lS - Long format list of all files, sorted by modification date (oldest first): ls -ltr cat12345678910111213Print and concatenate files.- Print the contents of a file to the standard output: cat file- Concatenate several files into the target file: cat file1 file2 &gt; target_file- Append several files into the target file: cat file1 file2 &gt;&gt; target_file- Number all output lines: cat -n file mv12345678910111213141516Move or rename files and directories.- Move files in arbitrary locations: mv source target- Do not prompt for confirmation before overwriting existing files: mv -f source target- Prompt for confirmation before overwriting existing files, regardless of file permissions: mv -i source target- Do not overwrite existing files at the target: mv -n source target- Move files in verbose mode, showing files after they are moved: mv -v source target touch12345678910Change a file access and modification times (atime, mtime).- Create a new empty file(s) or change the times for existing file(s) to current time: touch filename- Set the times on a file to a specific date and time: touch -t YYYYMMDDHHMM.SS filename- Use the times from a file to set the times on a second file: touch -r filename filename2]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
